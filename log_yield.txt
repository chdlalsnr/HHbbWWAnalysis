INFO:bamboo.analysisutils:Read config from file /home/ucl/cp3/fbury/.config/bamboorc
WARNING:bamboo.analysisutils:File test_Plotter/Cert_271036-284044_13TeV_23Sep2016ReReco_Collisions16_JSON.txt exists, it will not be downloaded again from https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions16/13TeV/ReReco/Final/Cert_271036-284044_13TeV_23Sep2016ReReco_Collisions16_JSON.txt
WARNING:bamboo.analysismodules:Output directory test_Plotter/results exists, previous results may be overwritten
Warning in <TClass::Init>: no dictionary for class edm::ProcessHistory is available
Warning in <TClass::Init>: no dictionary for class edm::ProcessConfiguration is available
Warning in <TClass::Init>: no dictionary for class edm::ParameterSetBlob is available
Warning in <TClass::Init>: no dictionary for class edm::Hash<1> is available
Warning in <TClass::Init>: no dictionary for class pair<edm::Hash<1>,edm::ParameterSetBlob> is available
DEBUG:bamboo.analysismodules:Skeleton tree written to test_Plotter/results/__skeleton__TTTo2L2Nu.root
INFO:bamboo.analysismodules:Sequential mode: calling processTrees for PlotterHHtobbWW.py:PlotterNanoHHtobbWW with (['/storage/data/cms/store/mc/RunIISummer16NanoAODv5/TTTo2L2Nu_TuneCP5_PSweights_13TeV-powheg-pythia8/NANOAODSIM/PUMoriond17_Nano1June2019_102X_mcRun2_asymptotic_v7-v1/250000/56E2714C-52AA-0648-A188-1A04E0C8D27F.root'], test_Plotter/results/TTTo2L2Nu.root, tree=Events, sample=TTTo2L2Nu
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: JetVariationsCalculator bamboo_jetVarCalcTTTo2L2Nu{}; // for TTTo2L2Nu
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com:443
DEBUG:urllib3.connectionpool:https://api.github.com:443 "GET /repos/cms-jet/JRDatabase/git/refs/heads HTTP/1.1" 200 226
DEBUG:bamboo.jetdatabasecache:cms-jet/JRDatabase tree up to date at fdf67084fe8046246af57c0cd8dfcb9131877c49
DEBUG:urllib3.connectionpool:https://api.github.com:443 "GET /repos/cms-jet/JECDatabase/git/refs/heads HTTP/1.1" 304 0
DEBUG:bamboo.jetdatabasecache:cms-jet/JECDatabase tree up to date at 372f4abaa71581e32919611ced7c402840fc1d2e
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: Type1METVariationsCalculator bamboo_Type1METVarCalcTTTo2L2Nu{}; // for TTTo2L2Nu
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com:443
DEBUG:urllib3.connectionpool:https://api.github.com:443 "GET /repos/cms-jet/JRDatabase/git/refs/heads HTTP/1.1" 200 226
DEBUG:bamboo.jetdatabasecache:cms-jet/JRDatabase tree up to date at fdf67084fe8046246af57c0cd8dfcb9131877c49
DEBUG:urllib3.connectionpool:https://api.github.com:443 "GET /repos/cms-jet/JECDatabase/git/refs/heads HTTP/1.1" 304 0
DEBUG:bamboo.jetdatabasecache:cms-jet/JECDatabase tree up to date at 372f4abaa71581e32919611ced7c402840fc1d2e
INFO:bamboo.analysismodules:Starting to define plots
DEBUG:bamboo.dataframebackend:Defining myCol1 as bamboo_jetVarCalcTTTo2L2Nu.produce(Jet_pt, Jet_eta, Jet_phi, Jet_mass, Jet_rawFactor, Jet_area, fixedGridRhoFastjetAll, ( ( ( ( ( run<<20 ) + ( luminosityBlock<<10 ) ) + event ) + 1 ) + static_cast<unsigned>(( ( ( nJet != 0 ) ) ? ( ( 1.*Jet_eta[0] / 0.01 ) ) : ( 0.0 ) )) ), GenJet_pt, GenJet_eta, GenJet_phi, GenJet_mass)
DEBUG:bamboo.dataframebackend:Defining myCol2 as bamboo_Type1METVarCalcTTTo2L2Nu.produce(Jet_pt, Jet_eta, Jet_phi, Jet_mass, Jet_rawFactor, Jet_area, Jet_muonSubtrFactor, Jet_neEmEF, Jet_chEmEF, fixedGridRhoFastjetAll, ( ( ( ( ( run<<20 ) + ( luminosityBlock<<10 ) ) + event ) + 1 ) + static_cast<unsigned>(( ( ( nJet != 0 ) ) ? ( ( 1.*Jet_eta[0] / 0.01 ) ) : ( 0.0 ) )) ), GenJet_pt, GenJet_eta, GenJet_phi, GenJet_mass, RawMET_pt, RawMET_pt, MET_MetUnclustEnUpDeltaX, MET_MetUnclustEnUpDeltaY, CorrT1METJet_rawPt, CorrT1METJet_eta, CorrT1METJet_phi, CorrT1METJet_area, CorrT1METJet_muonSubtrFactor, ROOT::VecOps::RVec<float>{}, ROOT::VecOps::RVec<float>{})
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun1(const ROOT::VecOps::RVec<Int_t>& myArg0, const ROOT::VecOps::RVec<Int_t>& myArg1, const UInt_t& myArg2)
{
  return rdfhelpers::select(rdfhelpers::IndexRange<std::size_t>{myArg2},
    [&myArg0, &myArg1, &myArg2] ( std::size_t i0 ) { return ( ( myArg0[i0] == 6 ) && ( myArg1[i0] & 8192 ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol3 as myFun1(GenPart_pdgId, GenPart_statusFlags, nGenPart)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun2(const ROOT::VecOps::RVec<Int_t>& myArg0, const ROOT::VecOps::RVec<Int_t>& myArg1, const UInt_t& myArg2)
{
  return rdfhelpers::select(rdfhelpers::IndexRange<std::size_t>{myArg2},
    [&myArg0, &myArg1, &myArg2] ( std::size_t i0 ) { return ( ( myArg0[i0] == -6 ) && ( myArg1[i0] & 8192 ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol4 as myFun2(GenPart_pdgId, GenPart_statusFlags, nGenPart)
DEBUG:bamboo.dataframebackend:Defining w_ttbarWeight as std::sqrt( ( std::exp( ( ( ( ( GenPart_pt[myCol3[0]] * 0.000109734 ) + -0.202274 ) + ( std::pow( GenPart_pt[myCol3[0]], 2 ) * -1.30088e-07 ) ) + ( 1.*58.3494 / ( GenPart_pt[myCol3[0]] + 196.252 ) ) ) ) * std::exp( ( ( ( ( GenPart_pt[myCol4[0]] * 0.000109734 ) + -0.202274 ) + ( std::pow( GenPart_pt[myCol4[0]], 2 ) * -1.30088e-07 ) ) + ( 1.*58.3494 / ( GenPart_pt[myCol4[0]] + 196.252 ) ) ) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:ttbarWeight systematic variation ttbarweightsystup: defining new weight based on None
DEBUG:bamboo.dataframebackend:Defining w_ttbarWeight__ttbarweightsystup as std::pow( std::sqrt( ( std::exp( ( ( ( ( GenPart_pt[myCol3[0]] * 0.000109734 ) + -0.202274 ) + ( std::pow( GenPart_pt[myCol3[0]], 2 ) * -1.30088e-07 ) ) + ( 1.*58.3494 / ( GenPart_pt[myCol3[0]] + 196.252 ) ) ) ) * std::exp( ( ( ( ( GenPart_pt[myCol4[0]] * 0.000109734 ) + -0.202274 ) + ( std::pow( GenPart_pt[myCol4[0]], 2 ) * -1.30088e-07 ) ) + ( 1.*58.3494 / ( GenPart_pt[myCol4[0]] + 196.252 ) ) ) ) ) ), 2 )
DEBUG:bamboo.dataframebackend:ttbarWeight systematic variation ttbarweightsystdown: defining new weight based on None
DEBUG:bamboo.dataframebackend:Defining w_ttbarWeight__ttbarweightsystdown as 1
DEBUG:bamboo.dataframebackend:Defining w_L1PreFiringRate as ( w_ttbarWeight * L1PreFiringWeight_Nom )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:L1PreFiringRate systematic variation ttbarweightsystup: defining new weight based on w_ttbarWeight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Defining w_L1PreFiringRate__ttbarweightsystup as ( w_ttbarWeight__ttbarweightsystup * L1PreFiringWeight_Nom )
DEBUG:bamboo.dataframebackend:L1PreFiringRate systematic variation ttbarweightsystdown: defining new weight based on w_ttbarWeight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Defining w_L1PreFiringRate__ttbarweightsystdown as ( w_ttbarWeight__ttbarweightsystdown * L1PreFiringWeight_Nom )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:L1PreFiringRate systematic variation L1PreFiringup: defining new weight based on w_ttbarWeight
DEBUG:bamboo.dataframebackend:Defining w_L1PreFiringRate__L1PreFiringup as ( w_ttbarWeight * L1PreFiringWeight_Up )
DEBUG:bamboo.dataframebackend:L1PreFiringRate systematic variation L1PreFiringdown: defining new weight based on w_ttbarWeight
DEBUG:bamboo.dataframebackend:Defining w_L1PreFiringRate__L1PreFiringdown as ( w_ttbarWeight * L1PreFiringWeight_Dn )
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: const ScaleFactor puweightFromFileTTTo2L2Nu{"/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/pileup/TTTo2L2Nu_2016.json"};
DEBUG:bamboo.dataframebackend:Defining w_puWeight as ( w_L1PreFiringRate * puweightFromFileTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumTrueInteractions, Pileup_nTrueInt } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:puWeight systematic variation ttbarweightsystup: defining new weight based on w_L1PreFiringRate__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Defining w_puWeight__ttbarweightsystup as ( w_L1PreFiringRate__ttbarweightsystup * puweightFromFileTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumTrueInteractions, Pileup_nTrueInt } }}, Nominal) )
DEBUG:bamboo.dataframebackend:puWeight systematic variation ttbarweightsystdown: defining new weight based on w_L1PreFiringRate__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Defining w_puWeight__ttbarweightsystdown as ( w_L1PreFiringRate__ttbarweightsystdown * puweightFromFileTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumTrueInteractions, Pileup_nTrueInt } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:puWeight systematic variation L1PreFiringup: defining new weight based on w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Defining w_puWeight__L1PreFiringup as ( w_L1PreFiringRate__L1PreFiringup * puweightFromFileTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumTrueInteractions, Pileup_nTrueInt } }}, Nominal) )
DEBUG:bamboo.dataframebackend:puWeight systematic variation L1PreFiringdown: defining new weight based on w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining w_puWeight__L1PreFiringdown as ( w_L1PreFiringRate__L1PreFiringdown * puweightFromFileTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumTrueInteractions, Pileup_nTrueInt } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:puWeight systematic variation pileupup: defining new weight based on w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Defining w_puWeight__pileupup as ( w_L1PreFiringRate * puweightFromFileTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumTrueInteractions, Pileup_nTrueInt } }}, Up) )
DEBUG:bamboo.dataframebackend:puWeight systematic variation pileupdown: defining new weight based on w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Defining w_puWeight__pileupdown as ( w_L1PreFiringRate * puweightFromFileTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumTrueInteractions, Pileup_nTrueInt } }}, Down) )
DEBUG:bamboo.dataframebackend:Filtering with ( Flag_goodVertices && Flag_globalSuperTightHalo2016Filter && Flag_HBHENoiseFilter && Flag_HBHENoiseIsoFilter && Flag_EcalDeadCellTriggerPrimitiveFilter && Flag_BadPFMuonFilter )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:passMETFlags systematic variation ttbarweightsystup: reusing w_puWeight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:passMETFlags systematic variation ttbarweightsystdown: reusing w_puWeight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:passMETFlags systematic variation L1PreFiringup: reusing w_puWeight__L1PreFiringup
DEBUG:bamboo.dataframebackend:passMETFlags systematic variation L1PreFiringdown: reusing w_puWeight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:passMETFlags systematic variation pileupup: reusing w_puWeight__pileupup
DEBUG:bamboo.dataframebackend:passMETFlags systematic variation pileupdown: reusing w_puWeight__pileupdown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<Float_t> myFun3(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Int_t>& myArg3, const UInt_t& myArg4)
{
  return rdfhelpers::map<Float_t>(rdfhelpers::IndexRange<std::size_t>{myArg4},
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4] ( std::size_t i0 ) { return ( ( ( ( std::abs( myArg3[i0] ) != 11 ) && ( std::abs( myArg3[i0] ) != 13 ) ) ) ? ( static_cast<Float_t>(myArg2[i0]) ) : ( ( ( ( ( std::abs( myArg3[i0] ) == 11 ) && ( myArg1[i0] >  0.8 ) ) ) ? ( static_cast<Float_t>(myArg2[i0]) ) : ( static_cast<Float_t>(( ( myArg2[i0] * 0.9 ) * ( myArg0[i0] + 1.0 ) )) ) ) ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol9 as myFun3(Electron_jetRelIso, Electron_mvaTTH, Electron_pt, Electron_pdgId, nElectron)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun4(const ROOT::VecOps::RVec<Float_t>& myArg0, const UInt_t& myArg1)
{
  return rdfhelpers::sort(rdfhelpers::IndexRange<std::size_t>{myArg1},
    [&myArg0, &myArg1] ( std::size_t i1 ) { return ( -myArg0[i1] ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol8 as myFun4(myCol9, nElectron)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun5(const ROOT::VecOps::RVec<Bool_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Float_t>& myArg4, const ROOT::VecOps::RVec<Float_t>& myArg5, const ROOT::VecOps::RVec<Float_t>& myArg6, const ROOT::VecOps::RVec<Float_t>& myArg7, const ROOT::VecOps::RVec<Float_t>& myArg8, const ROOT::VecOps::RVec<UChar_t>& myArg9, const ROOT::VecOps::RVec<std::size_t>& myArg10, const UInt_t& myArg11)
{
  return rdfhelpers::select(myArg10,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8, &myArg9, &myArg10, &myArg11] ( std::size_t i0 ) { return ( ( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg7[i0], myArg3[i0], myArg6[i0], myArg4[i0]}.Pt() >= 7.0 ) && ( std::abs( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg7[i0], myArg3[i0], myArg6[i0], myArg4[i0]}.Eta() ) <= 2.5 ) && ( std::abs( myArg1[i0] ) <= 0.05 ) && ( std::abs( myArg2[i0] ) <= 0.1 ) && ( myArg5[i0] <= 0.4 ) && ( myArg8[i0] <= 8 ) && myArg0[i0] && ( myArg9[i0] <= 1 ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol7 as myFun5(Electron_mvaFall17V2noIso_WPL, Electron_dxy, Electron_dz, Electron_eta, Electron_mass, Electron_miniPFRelIso_all, Electron_phi, Electron_pt, Electron_sip3d, Electron_lostHits, myCol8, nElectron)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<Float_t> myFun6(const ROOT::VecOps::RVec<Bool_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Int_t>& myArg4, const UInt_t& myArg5)
{
  return rdfhelpers::map<Float_t>(rdfhelpers::IndexRange<std::size_t>{myArg5},
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5] ( std::size_t i0 ) { return ( ( ( ( std::abs( myArg4[i0] ) != 11 ) && ( std::abs( myArg4[i0] ) != 13 ) ) ) ? ( static_cast<Float_t>(myArg3[i0]) ) : ( ( ( ( ( std::abs( myArg4[i0] ) == 13 ) && myArg0[i0] && ( myArg2[i0] >  0.85 ) ) ) ? ( static_cast<Float_t>(myArg3[i0]) ) : ( static_cast<Float_t>(( ( myArg3[i0] * 0.9 ) * ( myArg1[i0] + 1.0 ) )) ) ) ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol12 as myFun6(Muon_mediumId, Muon_jetRelIso, Muon_mvaTTH, Muon_pt, Muon_pdgId, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol11 as myFun4(myCol12, nMuon)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun7(const ROOT::VecOps::RVec<Bool_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Float_t>& myArg4, const ROOT::VecOps::RVec<Float_t>& myArg5, const ROOT::VecOps::RVec<Float_t>& myArg6, const ROOT::VecOps::RVec<Float_t>& myArg7, const ROOT::VecOps::RVec<Float_t>& myArg8, const ROOT::VecOps::RVec<std::size_t>& myArg9, const UInt_t& myArg10)
{
  return rdfhelpers::select(myArg9,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8, &myArg9, &myArg10] ( std::size_t i0 ) { return ( ( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg7[i0], myArg3[i0], myArg6[i0], myArg4[i0]}.Pt() >= 5.0 ) && ( std::abs( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg7[i0], myArg3[i0], myArg6[i0], myArg4[i0]}.Eta() ) <= 2.4 ) && ( std::abs( myArg1[i0] ) <= 0.05 ) && ( std::abs( myArg2[i0] ) <= 0.1 ) && ( myArg5[i0] <= 0.4 ) && ( myArg8[i0] <= 8 ) && myArg0[i0] ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol10 as myFun7(Muon_looseId, Muon_dxy, Muon_dz, Muon_eta, Muon_mass, Muon_miniPFRelIso_all, Muon_phi, Muon_pt, Muon_sip3d, myCol11, nMuon)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun8(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<std::size_t>& myArg4, const ROOT::VecOps::RVec<std::size_t>& myArg5, const UInt_t& myArg6, const UInt_t& myArg7)
{
  return rdfhelpers::select(myArg5,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7] ( std::size_t i2 ) { return ( ! ( -1 != rdfhelpers::next(myArg4,
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg6, &myArg7, i2] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg0[i2] - myArg2[i0] ), ( myArg1[i2] - myArg3[i0] )) ) <= 0.3 ); }, -1) ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol6 as myFun8(Electron_eta, Electron_phi, Muon_eta, Muon_phi, myCol10, myCol7, nElectron, nMuon)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun9(const ROOT::VecOps::RVec<Bool_t>& myArg0, const ROOT::VecOps::RVec<Bool_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Float_t>& myArg4, const ROOT::VecOps::RVec<Float_t>& myArg5, const ROOT::VecOps::RVec<Float_t>& myArg6, const ROOT::VecOps::RVec<Float_t>& myArg7, const ROOT::VecOps::RVec<Float_t>& myArg8, const ROOT::VecOps::RVec<Float_t>& myArg9, const ROOT::VecOps::RVec<Float_t>& myArg10, const ROOT::VecOps::RVec<Int_t>& myArg11, const ROOT::VecOps::RVec<UChar_t>& myArg12, const ROOT::VecOps::RVec<std::size_t>& myArg13, const UInt_t& myArg14, const UInt_t& myArg15)
{
  return rdfhelpers::select(myArg13,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8, &myArg9, &myArg10, &myArg11, &myArg12, &myArg13, &myArg14, &myArg15] ( std::size_t i1 ) { return ( ( myArg10[i1] >= 10 ) && ( ( ( std::abs( ( myArg4[i1] + myArg2[i1] ) ) <= 1.479 ) && ( myArg8[i1] <= 0.011 ) ) || ( ( std::abs( ( myArg4[i1] + myArg2[i1] ) ) >  1.479 ) && ( myArg8[i1] <= 0.03 ) ) ) && ( ( ! ( myArg11[i1] != -1 ) ) || ( myArg9[myArg11[i1]] <= 0.3093 ) ) && ( myArg5[i1] <= 0.1 ) && ( myArg3[i1] >= -0.04 ) && ( ( myArg7[i1] >= 0.8 ) || ( ( myArg6[i1] <  0.7 ) && myArg1[i1] ) ) && ( myArg12[i1] == 0 ) && myArg0[i1] ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol5 as myFun9(Electron_convVeto, Electron_mvaFall17V2noIso_WP80, Electron_deltaEtaSC, Electron_eInvMinusPInv, Electron_eta, Electron_hoe, Electron_jetRelIso, Electron_mvaTTH, Electron_sieie, Jet_btagDeepFlavB, myCol9, Electron_jetIdx, Electron_lostHits, myCol6, nElectron, nJet)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun10(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Float_t>& myArg4, const ROOT::VecOps::RVec<Int_t>& myArg5, const ROOT::VecOps::RVec<std::size_t>& myArg6, const UInt_t& myArg7, const UInt_t& myArg8)
{
  return rdfhelpers::select(myArg6,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8] ( std::size_t i1 ) { return ( ( myArg4[i1] >= 10.0 ) && ( ( ! ( myArg5[i1] != -1 ) ) || ( myArg0[myArg5[i1]] <= 0.3093 ) ) && ( ( myArg2[i1] >= 0.85 ) || ( ( myArg1[i1] <  0.5 ) && ( ( ! ( myArg5[i1] != -1 ) ) || ( myArg0[myArg5[i1]] <  ( ( std::min( ( 1.*std::max( 0.0, ( ( ( myArg3[i1] * 0.9 ) * ( myArg1[i1] + 1 ) ) - 20.0 ) ) / 25.0 ), 1.0 ) * 0.0614 ) + ( ( 1 - std::min( ( 1.*std::max( 0.0, ( ( ( myArg3[i1] * 0.9 ) * ( myArg1[i1] + 1 ) ) - 20.0 ) ) / 25.0 ), 1.0 ) ) * 0.3093 ) ) ) ) ) ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol13 as myFun10(Jet_btagDeepFlavB, Muon_jetRelIso, Muon_mvaTTH, Muon_pt, myCol12, Muon_jetIdx, myCol10, nJet, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol5.size() + myCol13.size() ) >= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:hasAtLeast2FakeableLeptons systematic variation ttbarweightsystup: reusing w_puWeight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:hasAtLeast2FakeableLeptons systematic variation ttbarweightsystdown: reusing w_puWeight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:hasAtLeast2FakeableLeptons systematic variation L1PreFiringup: reusing w_puWeight__L1PreFiringup
DEBUG:bamboo.dataframebackend:hasAtLeast2FakeableLeptons systematic variation L1PreFiringdown: reusing w_puWeight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:hasAtLeast2FakeableLeptons systematic variation pileupup: reusing w_puWeight__pileupup
DEBUG:bamboo.dataframebackend:hasAtLeast2FakeableLeptons systematic variation pileupdown: reusing w_puWeight__pileupdown
DEBUG:bamboo.dataframebackend:Defining w_genWeight as ( w_puWeight * genWeight )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:genWeight systematic variation ttbarweightsystup: defining new weight based on w_puWeight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Defining w_genWeight__ttbarweightsystup as ( w_puWeight__ttbarweightsystup * genWeight )
DEBUG:bamboo.dataframebackend:genWeight systematic variation ttbarweightsystdown: defining new weight based on w_puWeight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Defining w_genWeight__ttbarweightsystdown as ( w_puWeight__ttbarweightsystdown * genWeight )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:genWeight systematic variation L1PreFiringup: defining new weight based on w_puWeight__L1PreFiringup
DEBUG:bamboo.dataframebackend:Defining w_genWeight__L1PreFiringup as ( w_puWeight__L1PreFiringup * genWeight )
DEBUG:bamboo.dataframebackend:genWeight systematic variation L1PreFiringdown: defining new weight based on w_puWeight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining w_genWeight__L1PreFiringdown as ( w_puWeight__L1PreFiringdown * genWeight )
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:genWeight systematic variation pileupup: defining new weight based on w_puWeight__pileupup
DEBUG:bamboo.dataframebackend:Defining w_genWeight__pileupup as ( w_puWeight__pileupup * genWeight )
DEBUG:bamboo.dataframebackend:genWeight systematic variation pileupdown: defining new weight based on w_puWeight__pileupdown
DEBUG:bamboo.dataframebackend:Defining w_genWeight__pileupdown as ( w_puWeight__pileupdown * genWeight )
DEBUG:bamboo.dataframebackend:Filtering with ( ( ( ( ( ( ( myCol13.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myCol5.size() ) ) : ( ( ( ( myCol5.size() == 0 ) ) ? ( static_cast<std::size_t>(0) ) : ( ( ( ( ( myCol5.size() == 1 ) && ( myCol13.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myCol5.size() >= 2 ) && ( myCol13.size() == 1 ) ) ) ? ( ( ( ( ( myCol9[myCol5[0]] >  myCol12[myCol13[0]] ) && ( myCol9[myCol5[1]] >  myCol12[myCol13[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myCol5.size() == 1 ) && ( myCol13.size() >= 2 ) ) ) ? ( ( ( ( ( myCol9[myCol5[0]] >  myCol12[myCol13[0]] ) || ( myCol9[myCol5[0]] >  myCol12[myCol13[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) : ( ( ( ( myCol9[myCol5[0]] >  myCol12[myCol13[0]] ) ) ? ( ( ( ( myCol9[myCol5[1]] >  myCol12[myCol13[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myCol9[myCol5[0]] >  myCol12[myCol13[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - 0 ) >= 2 ) ) ? ( ( HLT_Ele27_WPTight_Gsf || HLT_Ele25_eta2p1_WPTight_Gsf || HLT_Ele27_eta2p1_WPLoose_Gsf || HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ ) ) : ( ( ( ( ( ( ( ( ( myCol13.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myCol5.size() ) ) : ( ( ( ( myCol5.size() == 0 ) ) ? ( static_cast<std::size_t>(0) ) : ( ( ( ( ( myCol5.size() == 1 ) && ( myCol13.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myCol5.size() >= 2 ) && ( myCol13.size() == 1 ) ) ) ? ( ( ( ( ( myCol9[myCol5[0]] >  myCol12[myCol13[0]] ) && ( myCol9[myCol5[1]] >  myCol12[myCol13[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myCol5.size() == 1 ) && ( myCol13.size() >= 2 ) ) ) ? ( ( ( ( ( myCol9[myCol5[0]] >  myCol12[myCol13[0]] ) || ( myCol9[myCol5[0]] >  myCol12[myCol13[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) : ( ( ( ( myCol9[myCol5[0]] >  myCol12[myCol13[0]] ) ) ? ( ( ( ( myCol9[myCol5[1]] >  myCol12[myCol13[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myCol9[myCol5[0]] >  myCol12[myCol13[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - 0 ) >= 1 ) && ( ( ( ( ( myCol5.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myCol13.size() ) ) : ( ( ( ( myCol13.size() == 0 ) ) ? ( static_cast<std::size_t>(0) ) : ( ( ( ( ( myCol13.size() == 1 ) && ( myCol5.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myCol13.size() >= 2 ) && ( myCol5.size() == 1 ) ) ) ? ( ( ( ( ( myCol12[myCol13[0]] >  myCol9[myCol5[0]] ) && ( myCol12[myCol13[1]] >  myCol9[myCol5[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myCol13.size() == 1 ) && ( myCol5.size() >= 2 ) ) ) ? ( ( ( ( ( myCol12[myCol13[0]] >  myCol9[myCol5[0]] ) || ( myCol12[myCol13[0]] >  myCol9[myCol5[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) : ( ( ( ( myCol12[myCol13[0]] >  myCol9[myCol5[0]] ) ) ? ( ( ( ( myCol12[myCol13[1]] >  myCol9[myCol5[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myCol12[myCol13[0]] >  myCol9[myCol5[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - 0 ) >= 1 ) ) ) ? ( ( HLT_IsoMu22 || HLT_IsoTkMu22 || HLT_IsoMu22_eta2p1 || HLT_IsoTkMu22_eta2p1 || HLT_IsoMu24 || HLT_IsoTkMu24 || HLT_Ele27_WPTight_Gsf || HLT_Ele25_eta2p1_WPTight_Gsf || HLT_Ele27_eta2p1_WPLoose_Gsf || HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL || HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ || HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL || HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ ) ) : ( ( ( ( ( ( ( ( myCol5.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myCol13.size() ) ) : ( ( ( ( myCol13.size() == 0 ) ) ? ( static_cast<std::size_t>(0) ) : ( ( ( ( ( myCol13.size() == 1 ) && ( myCol5.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myCol13.size() >= 2 ) && ( myCol5.size() == 1 ) ) ) ? ( ( ( ( ( myCol12[myCol13[0]] >  myCol9[myCol5[0]] ) && ( myCol12[myCol13[1]] >  myCol9[myCol5[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myCol13.size() == 1 ) && ( myCol5.size() >= 2 ) ) ) ? ( ( ( ( ( myCol12[myCol13[0]] >  myCol9[myCol5[0]] ) || ( myCol12[myCol13[0]] >  myCol9[myCol5[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) : ( ( ( ( myCol12[myCol13[0]] >  myCol9[myCol5[0]] ) ) ? ( ( ( ( myCol12[myCol13[1]] >  myCol9[myCol5[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myCol12[myCol13[0]] >  myCol9[myCol5[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - 0 ) >= 2 ) ) ? ( ( HLT_IsoMu22 || HLT_IsoTkMu22 || HLT_IsoMu22_eta2p1 || HLT_IsoTkMu22_eta2p1 || HLT_IsoMu24 || HLT_IsoTkMu24 || HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL || HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ || HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL || HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ ) ) : ( false ) ) ) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:withTrig systematic variation ttbarweightsystup: reusing w_genWeight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:withTrig systematic variation ttbarweightsystdown: reusing w_genWeight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:withTrig systematic variation L1PreFiringup: reusing w_genWeight__L1PreFiringup
DEBUG:bamboo.dataframebackend:withTrig systematic variation L1PreFiringdown: reusing w_genWeight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:withTrig systematic variation pileupup: reusing w_genWeight__pileupup
DEBUG:bamboo.dataframebackend:withTrig systematic variation pileupdown: reusing w_genWeight__pileupdown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: const BTagCalibration bTagCalib_deepjet{"deepjet", "/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/ScaleFactors_POG/DeepJet_2016LegacySF_V1_TuneCP5.csv"};
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: BTagCalibrationReader bTagReader_bTagReader_TTTo2L2Nu{BTagEntry::OP_RESHAPING, "central", { "up_jes", "up_lf", "up_hf", "up_hfstats1", "up_hfstats2", "up_lfstats1", "up_lfstats2", "up_cferr1", "up_cferr2", "down_jes", "down_lf", "down_hf", "down_hfstats1", "down_hfstats2", "down_lfstats1", "down_lfstats2", "down_cferr1", "down_cferr2" } }; // for bTagReader_TTTo2L2Nu
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun11(const UInt_t& myArg0, const rdfhelpers::ModifiedPtMCollection& myArg1)
{
  return rdfhelpers::sort(rdfhelpers::IndexRange<std::size_t>{myArg0},
    [&myArg0, &myArg1] ( std::size_t i0 ) { return ( -myArg1.pt(0)[i0] ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol17 as myFun11(nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun12(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Int_t>& myArg2, const ROOT::VecOps::RVec<std::size_t>& myArg3, const UInt_t& myArg4, const rdfhelpers::ModifiedPtMCollection& myArg5)
{
  return rdfhelpers::select(myArg3,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5] ( std::size_t i0 ) { return ( ( myArg2[i0] & 1 ) && ( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg5.pt(0)[i0], myArg0[i0], myArg1[i0], myArg5.mass(0)[i0]}.Pt() >= 25.0 ) && ( std::abs( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg5.pt(0)[i0], myArg0[i0], myArg1[i0], myArg5.mass(0)[i0]}.Eta() ) <= 2.4 ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol16 as myFun12(Jet_eta, Jet_phi, Jet_jetId, myCol17, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun13(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Float_t>& myArg4, const ROOT::VecOps::RVec<Float_t>& myArg5, const ROOT::VecOps::RVec<std::size_t>& myArg6, const ROOT::VecOps::RVec<std::size_t>& myArg7, const ROOT::VecOps::RVec<std::size_t>& myArg8, const UInt_t& myArg9, const UInt_t& myArg10, const UInt_t& myArg11)
{
  return rdfhelpers::select(myArg7,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8, &myArg9, &myArg10, &myArg11] ( std::size_t i3 ) { return ( ( ! ( -1 != rdfhelpers::next(myArg8,
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg8, &myArg9, &myArg10, i3] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg0[i0] - myArg2[i3] ), ( myArg1[i0] - myArg3[i3] )) ) <= 0.4 ); }, -1) ) ) && ( ! ( -1 != rdfhelpers::next(myArg6,
     [&myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg10, &myArg11, i3] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg4[i0] - myArg2[i3] ), ( myArg5[i0] - myArg3[i3] )) ) <= 0.4 ); }, -1) ) ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol15 as myFun13(Electron_eta, Electron_phi, Jet_eta, Jet_phi, Muon_eta, Muon_phi, myCol13, myCol16, myCol5, nElectron, nJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: Float_t myFun14(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Int_t>& myArg2, const ROOT::VecOps::RVec<std::size_t>& myArg3, const UInt_t& myArg4, const rdfhelpers::ModifiedPtMCollection& myArg5)
{
  return rdfhelpers::reduce(myArg3, 1.0,
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5] ( Float_t i1, std::size_t i0 ) { return ( i1 * bTagReader_bTagReader_TTTo2L2Nu.eval_auto_bounds("central", BTagEntry::jetFlavourFromHadronFlavour(myArg2[i0]), std::abs( myArg1[i0] ), myArg5.pt(0)[i0], myArg0[i0]) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol14 as myFun14(Jet_btagDeepFlavB, Jet_eta, Jet_hadronFlavour, myCol15, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: const ScaleFactor bamboo_nJetsWeightTTTo2L2Nu{"/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/ScaleFactors_Btag/BtagReweightingRatio_jetN_TTTo2L2Nu_2016.json"};
DEBUG:bamboo.dataframebackend:Defining w_BtagSF as ( w_genWeight * myCol14 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol15.size() } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:BtagSF systematic variation ttbarweightsystup: defining new weight based on w_genWeight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__ttbarweightsystup as ( w_genWeight__ttbarweightsystup * myCol14 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol15.size() } }}, Nominal) )
DEBUG:bamboo.dataframebackend:BtagSF systematic variation ttbarweightsystdown: defining new weight based on w_genWeight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__ttbarweightsystdown as ( w_genWeight__ttbarweightsystdown * myCol14 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol15.size() } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:BtagSF systematic variation L1PreFiringup: defining new weight based on w_genWeight__L1PreFiringup
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__L1PreFiringup as ( w_genWeight__L1PreFiringup * myCol14 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol15.size() } }}, Nominal) )
DEBUG:bamboo.dataframebackend:BtagSF systematic variation L1PreFiringdown: defining new weight based on w_genWeight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__L1PreFiringdown as ( w_genWeight__L1PreFiringdown * myCol14 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol15.size() } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:BtagSF systematic variation pileupup: defining new weight based on w_genWeight__pileupup
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__pileupup as ( w_genWeight__pileupup * myCol14 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol15.size() } }}, Nominal) )
DEBUG:bamboo.dataframebackend:BtagSF systematic variation pileupdown: defining new weight based on w_genWeight__pileupdown
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__pileupdown as ( w_genWeight__pileupdown * myCol14 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol15.size() } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:BtagSF systematic variation jerup: defining new weight based on w_genWeight
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun15(const UInt_t& myArg0, const rdfhelpers::ModifiedPtMCollection& myArg1)
{
  return rdfhelpers::sort(rdfhelpers::IndexRange<std::size_t>{myArg0},
    [&myArg0, &myArg1] ( std::size_t i0 ) { return ( -myArg1.pt(1)[i0] ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol21 as myFun15(nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun16(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Int_t>& myArg2, const ROOT::VecOps::RVec<std::size_t>& myArg3, const UInt_t& myArg4, const rdfhelpers::ModifiedPtMCollection& myArg5)
{
  return rdfhelpers::select(myArg3,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5] ( std::size_t i0 ) { return ( ( myArg2[i0] & 1 ) && ( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg5.pt(1)[i0], myArg0[i0], myArg1[i0], myArg5.mass(1)[i0]}.Pt() >= 25.0 ) && ( std::abs( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg5.pt(1)[i0], myArg0[i0], myArg1[i0], myArg5.mass(1)[i0]}.Eta() ) <= 2.4 ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol20 as myFun16(Jet_eta, Jet_phi, Jet_jetId, myCol21, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining myCol19 as myFun13(Electron_eta, Electron_phi, Jet_eta, Jet_phi, Muon_eta, Muon_phi, myCol13, myCol20, myCol5, nElectron, nJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol18 as myFun14(Jet_btagDeepFlavB, Jet_eta, Jet_hadronFlavour, myCol19, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__jerup as ( w_genWeight * myCol18 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol19.size() } }}, Nominal) )
DEBUG:bamboo.dataframebackend:BtagSF systematic variation jerdown: defining new weight based on w_genWeight
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun17(const UInt_t& myArg0, const rdfhelpers::ModifiedPtMCollection& myArg1)
{
  return rdfhelpers::sort(rdfhelpers::IndexRange<std::size_t>{myArg0},
    [&myArg0, &myArg1] ( std::size_t i0 ) { return ( -myArg1.pt(2)[i0] ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol25 as myFun17(nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun18(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Int_t>& myArg2, const ROOT::VecOps::RVec<std::size_t>& myArg3, const UInt_t& myArg4, const rdfhelpers::ModifiedPtMCollection& myArg5)
{
  return rdfhelpers::select(myArg3,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5] ( std::size_t i0 ) { return ( ( myArg2[i0] & 1 ) && ( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg5.pt(2)[i0], myArg0[i0], myArg1[i0], myArg5.mass(2)[i0]}.Pt() >= 25.0 ) && ( std::abs( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg5.pt(2)[i0], myArg0[i0], myArg1[i0], myArg5.mass(2)[i0]}.Eta() ) <= 2.4 ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol24 as myFun18(Jet_eta, Jet_phi, Jet_jetId, myCol25, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining myCol23 as myFun13(Electron_eta, Electron_phi, Jet_eta, Jet_phi, Muon_eta, Muon_phi, myCol13, myCol24, myCol5, nElectron, nJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol22 as myFun14(Jet_btagDeepFlavB, Jet_eta, Jet_hadronFlavour, myCol23, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__jerdown as ( w_genWeight * myCol22 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol23.size() } }}, Nominal) )
DEBUG:bamboo.dataframebackend:BtagSF systematic variation jesTotalup: defining new weight based on w_genWeight
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun19(const UInt_t& myArg0, const rdfhelpers::ModifiedPtMCollection& myArg1)
{
  return rdfhelpers::sort(rdfhelpers::IndexRange<std::size_t>{myArg0},
    [&myArg0, &myArg1] ( std::size_t i0 ) { return ( -myArg1.pt(3)[i0] ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol29 as myFun19(nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun20(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Int_t>& myArg2, const ROOT::VecOps::RVec<std::size_t>& myArg3, const UInt_t& myArg4, const rdfhelpers::ModifiedPtMCollection& myArg5)
{
  return rdfhelpers::select(myArg3,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5] ( std::size_t i0 ) { return ( ( myArg2[i0] & 1 ) && ( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg5.pt(3)[i0], myArg0[i0], myArg1[i0], myArg5.mass(3)[i0]}.Pt() >= 25.0 ) && ( std::abs( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg5.pt(3)[i0], myArg0[i0], myArg1[i0], myArg5.mass(3)[i0]}.Eta() ) <= 2.4 ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol28 as myFun20(Jet_eta, Jet_phi, Jet_jetId, myCol29, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining myCol27 as myFun13(Electron_eta, Electron_phi, Jet_eta, Jet_phi, Muon_eta, Muon_phi, myCol13, myCol28, myCol5, nElectron, nJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol26 as myFun14(Jet_btagDeepFlavB, Jet_eta, Jet_hadronFlavour, myCol27, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__jesTotalup as ( w_genWeight * myCol26 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol27.size() } }}, Nominal) )
DEBUG:bamboo.dataframebackend:BtagSF systematic variation jesTotaldown: defining new weight based on w_genWeight
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun21(const UInt_t& myArg0, const rdfhelpers::ModifiedPtMCollection& myArg1)
{
  return rdfhelpers::sort(rdfhelpers::IndexRange<std::size_t>{myArg0},
    [&myArg0, &myArg1] ( std::size_t i0 ) { return ( -myArg1.pt(4)[i0] ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol33 as myFun21(nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun22(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Int_t>& myArg2, const ROOT::VecOps::RVec<std::size_t>& myArg3, const UInt_t& myArg4, const rdfhelpers::ModifiedPtMCollection& myArg5)
{
  return rdfhelpers::select(myArg3,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5] ( std::size_t i0 ) { return ( ( myArg2[i0] & 1 ) && ( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg5.pt(4)[i0], myArg0[i0], myArg1[i0], myArg5.mass(4)[i0]}.Pt() >= 25.0 ) && ( std::abs( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg5.pt(4)[i0], myArg0[i0], myArg1[i0], myArg5.mass(4)[i0]}.Eta() ) <= 2.4 ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol32 as myFun22(Jet_eta, Jet_phi, Jet_jetId, myCol33, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining myCol31 as myFun13(Electron_eta, Electron_phi, Jet_eta, Jet_phi, Muon_eta, Muon_phi, myCol13, myCol32, myCol5, nElectron, nJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol30 as myFun14(Jet_btagDeepFlavB, Jet_eta, Jet_hadronFlavour, myCol31, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__jesTotaldown as ( w_genWeight * myCol30 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol31.size() } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:BtagSF systematic variation btag_ratioup: defining new weight based on w_genWeight
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__btag_ratioup as ( w_genWeight * myCol14 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol15.size() } }}, Up) )
DEBUG:bamboo.dataframebackend:BtagSF systematic variation btag_ratiodown: defining new weight based on w_genWeight
DEBUG:bamboo.dataframebackend:Defining w_BtagSF__btag_ratiodown as ( w_genWeight * myCol14 * bamboo_nJetsWeightTTTo2L2Nu.get(Parameters{{ { BinningVariable::NumJets, myCol15.size() } }}, Down) )
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<rdfhelpers::Combination<2>> myFun23(const ROOT::VecOps::RVec<std::size_t>& myArg0)
{
  return rdfhelpers::combine(
     [&myArg0] ( std::size_t i0, std::size_t i1 ) { return ( ( i0 <  i1 ) && true ); },
     myArg0, myArg0);
};

DEBUG:bamboo.dataframebackend:Defining myCol34 as myFun23(myCol7)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol34.size() >= 1 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation ttbarweightsystup: reusing w_BtagSF__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation ttbarweightsystdown: reusing w_BtagSF__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation L1PreFiringup: reusing w_BtagSF__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation L1PreFiringdown: reusing w_BtagSF__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation pileupup: reusing w_BtagSF__pileupup
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation pileupdown: reusing w_BtagSF__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation jerup: reusing w_BtagSF__jerup
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation jerdown: reusing w_BtagSF__jerdown
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation jesTotalup: reusing w_BtagSF__jesTotalup
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation jesTotaldown: reusing w_BtagSF__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation btag_ratioup: reusing w_BtagSF__btag_ratioup
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation btag_ratiodown: reusing w_BtagSF__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining myCol35 as myFun23(myCol10)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol35.size() >= 1 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation ttbarweightsystup: reusing w_BtagSF__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation ttbarweightsystdown: reusing w_BtagSF__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation L1PreFiringup: reusing w_BtagSF__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation L1PreFiringdown: reusing w_BtagSF__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation pileupup: reusing w_BtagSF__pileupup
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation pileupdown: reusing w_BtagSF__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation jerup: reusing w_BtagSF__jerup
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation jerdown: reusing w_BtagSF__jerdown
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation jesTotalup: reusing w_BtagSF__jesTotalup
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation jesTotaldown: reusing w_BtagSF__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation btag_ratioup: reusing w_BtagSF__btag_ratioup
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation btag_ratiodown: reusing w_BtagSF__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<rdfhelpers::Combination<2>> myFun24(const ROOT::VecOps::RVec<std::size_t>& myArg0, const ROOT::VecOps::RVec<std::size_t>& myArg1)
{
  return rdfhelpers::combine(
     [&myArg0, &myArg1] ( std::size_t i0, std::size_t i1 ) { return true; },
     myArg1, myArg0);
};

DEBUG:bamboo.dataframebackend:Defining myCol36 as myFun24(myCol10, myCol7)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol36.size() >= 1 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation ttbarweightsystup: reusing w_BtagSF__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation ttbarweightsystdown: reusing w_BtagSF__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation L1PreFiringup: reusing w_BtagSF__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation L1PreFiringdown: reusing w_BtagSF__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation pileupup: reusing w_BtagSF__pileupup
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation pileupdown: reusing w_BtagSF__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation jerup: reusing w_BtagSF__jerup
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation jerdown: reusing w_BtagSF__jerdown
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation jesTotalup: reusing w_BtagSF__jesTotalup
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation jesTotaldown: reusing w_BtagSF__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation btag_ratioup: reusing w_BtagSF__btag_ratioup
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation btag_ratiodown: reusing w_BtagSF__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining v0_Yield_HasElElPreselected as 0
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected with variables v0_Yield_HasElElPreselected and weight w_BtagSF
DEBUG:bamboo.dataframebackend:Declaring Histo1D helper for types ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', 'int', 'double')
/home/users/f/b/fbury/bamboodev/bamboovenv/lib/python3.7/site-packages/bamboo/dataframebackend.py:379: FutureWarning: Instantiating a function template with parentheses ( f(type1, ..., typeN) ) is deprecated and will not be supported in a future version of ROOT. Instead, use square brackets: f[type1, ..., typeN]
  _RDFHistoND_methods[kyTypes] = getattr(gbl.rdfhelpers.rdfhistofactory, f"Histo{nVars:d}D")(*templTypes)
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation ttbarweightsystup with variables v0_Yield_HasElElPreselected and weight w_BtagSF__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation ttbarweightsystdown with variables v0_Yield_HasElElPreselected and weight w_BtagSF__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Declaring Histo1D helper for types ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', 'int', 'float')
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_BtagSF__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_BtagSF__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation pileupup with variables v0_Yield_HasElElPreselected and weight w_BtagSF__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation pileupdown with variables v0_Yield_HasElElPreselected and weight w_BtagSF__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation jerup with variables v0_Yield_HasElElPreselected and weight w_BtagSF__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation jerdown with variables v0_Yield_HasElElPreselected and weight w_BtagSF__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation jesTotalup with variables v0_Yield_HasElElPreselected and weight w_BtagSF__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation jesTotaldown with variables v0_Yield_HasElElPreselected and weight w_BtagSF__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation btag_ratioup with variables v0_Yield_HasElElPreselected and weight w_BtagSF__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation btag_ratiodown with variables v0_Yield_HasElElPreselected and weight w_BtagSF__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining v0_Yield_HasMuMuPreselected as 0
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation ttbarweightsystup with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation ttbarweightsystdown with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation pileupup with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation pileupdown with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation jerup with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation jerdown with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation jesTotalup with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation jesTotaldown with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation btag_ratioup with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation btag_ratiodown with variables v0_Yield_HasMuMuPreselected and weight w_BtagSF__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining v0_Yield_HasElMuPreselected as 0
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected with variables v0_Yield_HasElMuPreselected and weight w_BtagSF
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation ttbarweightsystup with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation ttbarweightsystdown with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation pileupup with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation pileupdown with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation jerup with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation jerdown with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation jesTotalup with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation jesTotaldown with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation btag_ratioup with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation btag_ratiodown with variables v0_Yield_HasElMuPreselected and weight w_BtagSF__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<rdfhelpers::Combination<2>> myFun25(const Int_t& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<std::size_t>& myArg3, const ROOT::VecOps::RVec<std::size_t>& myArg4)
{
  return rdfhelpers::combine(
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4] ( std::size_t i3, std::size_t i4 ) { return ( ( myArg4[i3] <  myArg4[i4] ) && true ); },
     rdfhelpers::IndexRange<std::size_t>{0, ( ( ( myArg3.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myArg4.size() ) ) : ( ( ( ( myArg4.size() == 0 ) ) ? ( static_cast<std::size_t>(myArg0) ) : ( ( ( ( ( myArg4.size() == 1 ) && ( myArg3.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myArg4.size() >= 2 ) && ( myArg3.size() == 1 ) ) ) ? ( ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[0]] ) && ( myArg2[myArg4[1]] >  myArg1[myArg3[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myArg4.size() == 1 ) && ( myArg3.size() >= 2 ) ) ) ? ( ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[0]] ) || ( myArg2[myArg4[0]] >  myArg1[myArg3[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) : ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[0]] ) ) ? ( ( ( ( myArg2[myArg4[1]] >  myArg1[myArg3[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) ) ) ) ) ) ) ) ) ) ) )}, rdfhelpers::IndexRange<std::size_t>{0, ( ( ( myArg3.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myArg4.size() ) ) : ( ( ( ( myArg4.size() == 0 ) ) ? ( static_cast<std::size_t>(myArg0) ) : ( ( ( ( ( myArg4.size() == 1 ) && ( myArg3.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myArg4.size() >= 2 ) && ( myArg3.size() == 1 ) ) ) ? ( ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[0]] ) && ( myArg2[myArg4[1]] >  myArg1[myArg3[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myArg4.size() == 1 ) && ( myArg3.size() >= 2 ) ) ) ? ( ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[0]] ) || ( myArg2[myArg4[0]] >  myArg1[myArg3[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) : ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[0]] ) ) ? ( ( ( ( myArg2[myArg4[1]] >  myArg1[myArg3[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) ) ) ) ) ) ) ) ) ) ) )});
};

DEBUG:bamboo.dataframebackend:Defining myCol37 as myFun25(v0_Yield_HasElElPreselected, myCol12, myCol9, myCol13, myCol5)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol37.size() >= 1 ) && ( Electron_charge[myCol5[myCol37[0].get(0)]] != Electron_charge[myCol5[myCol37[0].get(1)]] ) && ( ( myCol9[myCol5[myCol37[0].get(0)]] >  15 ) && ( myCol9[myCol5[myCol37[0].get(1)]] >  15 ) ) && ( ( myCol9[myCol5[myCol37[0].get(0)]] >  25 ) || ( myCol9[myCol5[myCol37[0].get(1)]] >  25 ) ) )
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: const ScaleFactor myFun26{"/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/ScaleFactors_ttH/Electron_EGamma_SF2D_LooseMVA2016.json"};
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: const ScaleFactor myFun27{"/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/ScaleFactors_ttH/Electron_EGamma_SF2D_LooseEff2016.json"};
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: const ScaleFactor myFun28{"/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/ScaleFactors_ttH/Electron_EGamma_SF2D_RecoEff2016PtGt20.json"};
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: const ScaleFactor myFun29{"/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/ScaleFactors_ttH/Electron_EGamma_SF2D_RecoEff2016PtLt20.json"};
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable as ( w_BtagSF * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation ttbarweightsystup: defining new weight based on w_BtagSF__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__ttbarweightsystup as ( w_BtagSF__ttbarweightsystup * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation ttbarweightsystdown: defining new weight based on w_BtagSF__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__ttbarweightsystdown as ( w_BtagSF__ttbarweightsystdown * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation L1PreFiringup: defining new weight based on w_BtagSF__L1PreFiringup
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__L1PreFiringup as ( w_BtagSF__L1PreFiringup * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation L1PreFiringdown: defining new weight based on w_BtagSF__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__L1PreFiringdown as ( w_BtagSF__L1PreFiringdown * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation pileupup: defining new weight based on w_BtagSF__pileupup
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__pileupup as ( w_BtagSF__pileupup * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation pileupdown: defining new weight based on w_BtagSF__pileupdown
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__pileupdown as ( w_BtagSF__pileupdown * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation jerup: defining new weight based on w_BtagSF__jerup
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__jerup as ( w_BtagSF__jerup * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation jerdown: defining new weight based on w_BtagSF__jerdown
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__jerdown as ( w_BtagSF__jerdown * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation jesTotalup: defining new weight based on w_BtagSF__jesTotalup
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__jesTotalup as ( w_BtagSF__jesTotalup * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation jesTotaldown: defining new weight based on w_BtagSF__jesTotaldown
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__jesTotaldown as ( w_BtagSF__jesTotaldown * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation btag_ratioup: defining new weight based on w_BtagSF__btag_ratioup
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__btag_ratioup as ( w_BtagSF__btag_ratioup * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation btag_ratiodown: defining new weight based on w_BtagSF__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__btag_ratiodown as ( w_BtagSF__btag_ratiodown * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleElectron_trigSFup', 'ttH_doubleElectron_trigSFdown'] for systematic ttH_doubleElectron_trigSF
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation ttH_doubleElectron_trigSFup: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__ttH_doubleElectron_trigSFup as ( w_BtagSF * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.9996 ) : ( 1.02 ) ) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation ttH_doubleElectron_trigSFdown: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__ttH_doubleElectron_trigSFdown as ( w_BtagSF * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.9603999999999999 ) : ( 0.98 ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation el_looseidup: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__el_looseidup as ( w_BtagSF * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Up) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Up) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation el_looseiddown: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__el_looseiddown as ( w_BtagSF * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Down) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Down) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation el_looseeffup: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__el_looseeffup as ( w_BtagSF * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Up) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Up) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation el_looseeffdown: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__el_looseeffdown as ( w_BtagSF * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Down) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Down) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation el_looserecoptgt20up: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__el_looserecoptgt20up as ( w_BtagSF * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Up) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Up) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation el_looserecoptgt20down: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__el_looserecoptgt20down as ( w_BtagSF * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Down) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) ) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Down) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation el_looserecoptlt20up: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__el_looserecoptlt20up as ( w_BtagSF * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Up) ) ) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Up) ) ) )
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation el_looserecoptlt20down: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElElFakeable__el_looserecoptlt20down as ( w_BtagSF * ( ( ( myCol9[myCol5[myCol37[0].get(1)]] <  25 ) ) ? ( 0.98 ) : ( 1.0 ) ) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[0].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol37[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(0)]] } }}, Down) ) ) * ( ( ( Electron_pt[myCol5[myCol37[0].get(1)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol37[0].get(1)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[0].get(1)]] } }}, Down) ) ) )
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<rdfhelpers::Combination<2>> myFun30(const Int_t& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<std::size_t>& myArg3, const ROOT::VecOps::RVec<std::size_t>& myArg4)
{
  return rdfhelpers::combine(
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4] ( std::size_t i2, std::size_t i3 ) { return ( ( myArg3[i2] <  myArg3[i3] ) && true ); },
     rdfhelpers::IndexRange<std::size_t>{0, ( ( ( myArg4.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myArg3.size() ) ) : ( ( ( ( myArg3.size() == 0 ) ) ? ( static_cast<std::size_t>(myArg0) ) : ( ( ( ( ( myArg3.size() == 1 ) && ( myArg4.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myArg3.size() >= 2 ) && ( myArg4.size() == 1 ) ) ) ? ( ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[0]] ) && ( myArg1[myArg3[1]] >  myArg2[myArg4[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myArg3.size() == 1 ) && ( myArg4.size() >= 2 ) ) ) ? ( ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[0]] ) || ( myArg1[myArg3[0]] >  myArg2[myArg4[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) : ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[0]] ) ) ? ( ( ( ( myArg1[myArg3[1]] >  myArg2[myArg4[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) ) ) ) ) ) ) ) ) ) ) )}, rdfhelpers::IndexRange<std::size_t>{0, ( ( ( myArg4.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myArg3.size() ) ) : ( ( ( ( myArg3.size() == 0 ) ) ? ( static_cast<std::size_t>(myArg0) ) : ( ( ( ( ( myArg3.size() == 1 ) && ( myArg4.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myArg3.size() >= 2 ) && ( myArg4.size() == 1 ) ) ) ? ( ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[0]] ) && ( myArg1[myArg3[1]] >  myArg2[myArg4[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myArg3.size() == 1 ) && ( myArg4.size() >= 2 ) ) ) ? ( ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[0]] ) || ( myArg1[myArg3[0]] >  myArg2[myArg4[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) : ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[0]] ) ) ? ( ( ( ( myArg1[myArg3[1]] >  myArg2[myArg4[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) ) ) ) ) ) ) ) ) ) ) )});
};

DEBUG:bamboo.dataframebackend:Defining myCol38 as myFun30(v0_Yield_HasMuMuPreselected, myCol12, myCol9, myCol13, myCol5)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol38.size() >= 1 ) && ( Muon_charge[myCol13[myCol38[0].get(0)]] != Muon_charge[myCol13[myCol38[0].get(1)]] ) && ( ( myCol12[myCol13[myCol38[0].get(0)]] >  15 ) && ( myCol12[myCol13[myCol38[0].get(1)]] >  15 ) ) && ( ( myCol12[myCol13[myCol38[0].get(0)]] >  25 ) || ( myCol12[myCol13[myCol38[0].get(1)]] >  25 ) ) )
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: const ScaleFactor myFun31{"/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/ScaleFactors_ttH/Muon_EGamma_SF2D_Loose2016.json"};
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable as ( w_BtagSF * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation ttbarweightsystup: defining new weight based on w_BtagSF__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__ttbarweightsystup as ( w_BtagSF__ttbarweightsystup * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation ttbarweightsystdown: defining new weight based on w_BtagSF__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__ttbarweightsystdown as ( w_BtagSF__ttbarweightsystdown * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation L1PreFiringup: defining new weight based on w_BtagSF__L1PreFiringup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__L1PreFiringup as ( w_BtagSF__L1PreFiringup * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation L1PreFiringdown: defining new weight based on w_BtagSF__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__L1PreFiringdown as ( w_BtagSF__L1PreFiringdown * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation pileupup: defining new weight based on w_BtagSF__pileupup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__pileupup as ( w_BtagSF__pileupup * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation pileupdown: defining new weight based on w_BtagSF__pileupdown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__pileupdown as ( w_BtagSF__pileupdown * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation jerup: defining new weight based on w_BtagSF__jerup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__jerup as ( w_BtagSF__jerup * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation jerdown: defining new weight based on w_BtagSF__jerdown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__jerdown as ( w_BtagSF__jerdown * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation jesTotalup: defining new weight based on w_BtagSF__jesTotalup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__jesTotalup as ( w_BtagSF__jesTotalup * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation jesTotaldown: defining new weight based on w_BtagSF__jesTotaldown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__jesTotaldown as ( w_BtagSF__jesTotaldown * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation btag_ratioup: defining new weight based on w_BtagSF__btag_ratioup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__btag_ratioup as ( w_BtagSF__btag_ratioup * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation btag_ratiodown: defining new weight based on w_BtagSF__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__btag_ratiodown as ( w_BtagSF__btag_ratiodown * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleMuon_trigSFup', 'ttH_doubleMuon_trigSFdown'] for systematic ttH_doubleMuon_trigSF
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation ttH_doubleMuon_trigSFup: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__ttH_doubleMuon_trigSFup as ( w_BtagSF * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) * 0.9999 )
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation ttH_doubleMuon_trigSFdown: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__ttH_doubleMuon_trigSFdown as ( w_BtagSF * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Nominal) * 0.9801 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation mu_looseup: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__mu_looseup as ( w_BtagSF * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Up) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Up) )
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation mu_loosedown: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuFakeable__mu_loosedown as ( w_BtagSF * 0.99 * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(0)]] } }}, Down) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[0].get(1)]] } }}, Down) )
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<rdfhelpers::Combination<2>> myFun32(const Int_t& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<std::size_t>& myArg3, const ROOT::VecOps::RVec<std::size_t>& myArg4)
{
  return rdfhelpers::combine(
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4] ( std::size_t i0, std::size_t i1 ) { return true; },
     rdfhelpers::IndexRange<std::size_t>{0, ( ( ( myArg3.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myArg4.size() ) ) : ( ( ( ( myArg4.size() == 0 ) ) ? ( static_cast<std::size_t>(myArg0) ) : ( ( ( ( ( myArg4.size() == 1 ) && ( myArg3.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myArg4.size() >= 2 ) && ( myArg3.size() == 1 ) ) ) ? ( ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[0]] ) && ( myArg2[myArg4[1]] >  myArg1[myArg3[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myArg4.size() == 1 ) && ( myArg3.size() >= 2 ) ) ) ? ( ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[0]] ) || ( myArg2[myArg4[0]] >  myArg1[myArg3[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) : ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[0]] ) ) ? ( ( ( ( myArg2[myArg4[1]] >  myArg1[myArg3[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myArg2[myArg4[0]] >  myArg1[myArg3[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) ) ) ) ) ) ) ) ) ) ) )}, rdfhelpers::IndexRange<std::size_t>{0, ( ( ( myArg4.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myArg3.size() ) ) : ( ( ( ( myArg3.size() == 0 ) ) ? ( static_cast<std::size_t>(myArg0) ) : ( ( ( ( ( myArg3.size() == 1 ) && ( myArg4.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myArg3.size() >= 2 ) && ( myArg4.size() == 1 ) ) ) ? ( ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[0]] ) && ( myArg1[myArg3[1]] >  myArg2[myArg4[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myArg3.size() == 1 ) && ( myArg4.size() >= 2 ) ) ) ? ( ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[0]] ) || ( myArg1[myArg3[0]] >  myArg2[myArg4[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) : ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[0]] ) ) ? ( ( ( ( myArg1[myArg3[1]] >  myArg2[myArg4[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myArg1[myArg3[0]] >  myArg2[myArg4[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(myArg0) ) ) ) ) ) ) ) ) ) ) ) ) ) )});
};

DEBUG:bamboo.dataframebackend:Defining myCol39 as myFun32(v0_Yield_HasElMuPreselected, myCol12, myCol9, myCol13, myCol5)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol39.size() >= 1 ) && ( Electron_charge[myCol5[myCol39[0].get(0)]] != Muon_charge[myCol13[myCol39[0].get(1)]] ) && ( ( myCol9[myCol5[myCol39[0].get(0)]] >  15 ) && ( myCol12[myCol13[myCol39[0].get(1)]] >  15 ) ) && ( ( myCol9[myCol5[myCol39[0].get(0)]] >  25 ) || ( myCol12[myCol13[myCol39[0].get(1)]] >  25 ) ) )
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable as ( w_BtagSF * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation ttbarweightsystup: defining new weight based on w_BtagSF__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__ttbarweightsystup as ( w_BtagSF__ttbarweightsystup * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation ttbarweightsystdown: defining new weight based on w_BtagSF__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__ttbarweightsystdown as ( w_BtagSF__ttbarweightsystdown * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation L1PreFiringup: defining new weight based on w_BtagSF__L1PreFiringup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__L1PreFiringup as ( w_BtagSF__L1PreFiringup * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation L1PreFiringdown: defining new weight based on w_BtagSF__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__L1PreFiringdown as ( w_BtagSF__L1PreFiringdown * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation pileupup: defining new weight based on w_BtagSF__pileupup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__pileupup as ( w_BtagSF__pileupup * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation pileupdown: defining new weight based on w_BtagSF__pileupdown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__pileupdown as ( w_BtagSF__pileupdown * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation jerup: defining new weight based on w_BtagSF__jerup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__jerup as ( w_BtagSF__jerup * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation jerdown: defining new weight based on w_BtagSF__jerdown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__jerdown as ( w_BtagSF__jerdown * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation jesTotalup: defining new weight based on w_BtagSF__jesTotalup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__jesTotalup as ( w_BtagSF__jesTotalup * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation jesTotaldown: defining new weight based on w_BtagSF__jesTotaldown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__jesTotaldown as ( w_BtagSF__jesTotaldown * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation btag_ratioup: defining new weight based on w_BtagSF__btag_ratioup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__btag_ratioup as ( w_BtagSF__btag_ratioup * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation btag_ratiodown: defining new weight based on w_BtagSF__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__btag_ratiodown as ( w_BtagSF__btag_ratiodown * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_electronMuon_trigSFup', 'ttH_electronMuon_trigSFdown'] for systematic ttH_electronMuon_trigSF
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation ttH_electronMuon_trigSFup: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__ttH_electronMuon_trigSFup as ( w_BtagSF * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) * 1.01 )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation ttH_electronMuon_trigSFdown: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__ttH_electronMuon_trigSFdown as ( w_BtagSF * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) * 0.99 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation el_looseidup: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__el_looseidup as ( w_BtagSF * 1.0 * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Up) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation el_looseiddown: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__el_looseiddown as ( w_BtagSF * 1.0 * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Down) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation el_looseeffup: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__el_looseeffup as ( w_BtagSF * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Up) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation el_looseeffdown: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__el_looseeffdown as ( w_BtagSF * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Down) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation el_looserecoptgt20up: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__el_looserecoptgt20up as ( w_BtagSF * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Up) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation el_looserecoptgt20down: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__el_looserecoptgt20down as ( w_BtagSF * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Down) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation el_looserecoptlt20up: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__el_looserecoptlt20up as ( w_BtagSF * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Up) ) ) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation el_looserecoptlt20down: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__el_looserecoptlt20down as ( w_BtagSF * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Down) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation mu_looseup: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__mu_looseup as ( w_BtagSF * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Up) )
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation mu_loosedown: defining new weight based on w_BtagSF
DEBUG:bamboo.dataframebackend:Defining w_HasElMuFakeable__mu_loosedown as ( w_BtagSF * 1.0 * myFun26.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * myFun27.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[0].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) * ( ( ( Electron_pt[myCol5[myCol39[0].get(0)]] >  20 ) ) ? ( myFun28.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) : ( myFun29.get(Parameters{{ { BinningVariable::Eta, Electron_eta[myCol5[myCol39[0].get(0)]] }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[0].get(0)]] } }}, Nominal) ) ) * myFun31.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[0].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[0].get(1)]] } }}, Down) )
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation ttbarweightsystup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation ttbarweightsystdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation pileupup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation pileupdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation jerup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation jerdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation jesTotalup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation jesTotaldown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation btag_ratioup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation btag_ratiodown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation ttH_doubleElectron_trigSFup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttH_doubleElectron_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation ttH_doubleElectron_trigSFdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttH_doubleElectron_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation el_looseidup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation el_looseiddown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation el_looseeffup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation el_looseeffdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation el_looserecoptgt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation el_looserecoptgt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation el_looserecoptlt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation el_looserecoptlt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation ttbarweightsystup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation ttbarweightsystdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation pileupup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation pileupdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation jerup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation jerdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation jesTotalup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation jesTotaldown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation btag_ratioup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation btag_ratiodown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation ttH_doubleMuon_trigSFup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttH_doubleMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation ttH_doubleMuon_trigSFdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttH_doubleMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation mu_looseup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation mu_loosedown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation ttbarweightsystup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation ttbarweightsystdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation pileupup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation pileupdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation jerup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation jerdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation jesTotalup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation jesTotaldown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation btag_ratioup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation btag_ratiodown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation ttH_electronMuon_trigSFup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttH_electronMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation ttH_electronMuon_trigSFdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttH_electronMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation el_looseidup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation el_looseiddown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation el_looseeffup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation el_looseeffdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation el_looserecoptgt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation el_looserecoptgt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation el_looserecoptlt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation el_looserecoptlt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation mu_looseup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation mu_loosedown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: std::size_t myFun33(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<rdfhelpers::Combination<2>>& myArg4, const UInt_t& myArg5)
{
  return rdfhelpers::next(rdfhelpers::IndexRange<std::size_t>{myArg4.size()},
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5] ( std::size_t i2 ) { return ( ROOT::Math::VectorUtil::InvariantMass(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg3[myArg4[i2].get(0)], myArg0[myArg4[i2].get(0)], myArg2[myArg4[i2].get(0)], myArg1[myArg4[i2].get(0)]}, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg3[myArg4[i2].get(1)], myArg0[myArg4[i2].get(1)], myArg2[myArg4[i2].get(1)], myArg1[myArg4[i2].get(1)]}) <  12.0 ); }, -1);
};

DEBUG:bamboo.dataframebackend:Defining myCol40 as myFun33(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol34, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol42 as myFun23(myCol10)
DEBUG:bamboo.dataframebackend:Defining myCol41 as myFun33(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol42, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol44 as myFun24(myCol10, myCol7)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: std::size_t myFun34(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Float_t>& myArg4, const ROOT::VecOps::RVec<Float_t>& myArg5, const ROOT::VecOps::RVec<Float_t>& myArg6, const ROOT::VecOps::RVec<Float_t>& myArg7, const ROOT::VecOps::RVec<rdfhelpers::Combination<2>>& myArg8, const UInt_t& myArg9, const UInt_t& myArg10)
{
  return rdfhelpers::next(rdfhelpers::IndexRange<std::size_t>{myArg8.size()},
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8, &myArg9, &myArg10] ( std::size_t i2 ) { return ( ROOT::Math::VectorUtil::InvariantMass(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg3[myArg8[i2].get(0)], myArg0[myArg8[i2].get(0)], myArg2[myArg8[i2].get(0)], myArg1[myArg8[i2].get(0)]}, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg7[myArg8[i2].get(1)], myArg4[myArg8[i2].get(1)], myArg6[myArg8[i2].get(1)], myArg5[myArg8[i2].get(1)]}) <  12.0 ); }, -1);
};

DEBUG:bamboo.dataframebackend:Defining myCol43 as myFun34(Electron_eta, Electron_mass, Electron_phi, Electron_pt, Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol44, nElectron, nMuon)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<rdfhelpers::Combination<2>> myFun35(const ROOT::VecOps::RVec<Int_t>& myArg0, const ROOT::VecOps::RVec<std::size_t>& myArg1, const UInt_t& myArg2)
{
  return rdfhelpers::combine(
     [&myArg0, &myArg1, &myArg2] ( std::size_t i0, std::size_t i1 ) { return ( ( i0 <  i1 ) && ( myArg0[i0] != myArg0[i1] ) ); },
     myArg1, myArg1);
};

DEBUG:bamboo.dataframebackend:Defining myCol46 as myFun35(Electron_charge, myCol6, nElectron)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: std::size_t myFun36(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<rdfhelpers::Combination<2>>& myArg4, const UInt_t& myArg5)
{
  return rdfhelpers::next(rdfhelpers::IndexRange<std::size_t>{myArg4.size()},
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5] ( std::size_t i3 ) { return rdfhelpers::in_range(81.1876, ROOT::Math::VectorUtil::InvariantMass(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg3[myArg4[i3].get(0)], myArg0[myArg4[i3].get(0)], myArg2[myArg4[i3].get(0)], myArg1[myArg4[i3].get(0)]}, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg3[myArg4[i3].get(1)], myArg0[myArg4[i3].get(1)], myArg2[myArg4[i3].get(1)], myArg1[myArg4[i3].get(1)]}), 101.1876); }, -1);
};

DEBUG:bamboo.dataframebackend:Defining myCol45 as myFun36(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol46, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol48 as myFun35(Muon_charge, myCol10, nMuon)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: std::size_t myFun37(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<rdfhelpers::Combination<2>>& myArg4, const UInt_t& myArg5)
{
  return rdfhelpers::next(rdfhelpers::IndexRange<std::size_t>{myArg4.size()},
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5] ( std::size_t i2 ) { return rdfhelpers::in_range(81.1876, ROOT::Math::VectorUtil::InvariantMass(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg3[myArg4[i2].get(0)], myArg0[myArg4[i2].get(0)], myArg2[myArg4[i2].get(0)], myArg1[myArg4[i2].get(0)]}, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg3[myArg4[i2].get(1)], myArg0[myArg4[i2].get(1)], myArg2[myArg4[i2].get(1)], myArg1[myArg4[i2].get(1)]}), 101.1876); }, -1);
};

DEBUG:bamboo.dataframebackend:Defining myCol47 as myFun37(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol48, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( ( ! ( -1 != myCol40 ) ) && ( ! ( -1 != myCol41 ) ) && ( ! ( -1 != myCol43 ) ) && ( ! ( -1 != myCol45 ) ) && ( ! ( -1 != myCol47 ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation ttbarweightsystup: reusing w_HasElElFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation ttbarweightsystdown: reusing w_HasElElFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation L1PreFiringup: reusing w_HasElElFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation L1PreFiringdown: reusing w_HasElElFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation pileupup: reusing w_HasElElFakeable__pileupup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation pileupdown: reusing w_HasElElFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation jerup: reusing w_HasElElFakeable__jerup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation jerdown: reusing w_HasElElFakeable__jerdown
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation jesTotalup: reusing w_HasElElFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation jesTotaldown: reusing w_HasElElFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation btag_ratioup: reusing w_HasElElFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation btag_ratiodown: reusing w_HasElElFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleElectron_trigSFup', 'ttH_doubleElectron_trigSFdown'] for systematic ttH_doubleElectron_trigSF
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation ttH_doubleElectron_trigSFup: reusing w_HasElElFakeable__ttH_doubleElectron_trigSFup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation ttH_doubleElectron_trigSFdown: reusing w_HasElElFakeable__ttH_doubleElectron_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation el_looseidup: reusing w_HasElElFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation el_looseiddown: reusing w_HasElElFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation el_looseeffup: reusing w_HasElElFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation el_looseeffdown: reusing w_HasElElFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation el_looserecoptgt20up: reusing w_HasElElFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation el_looserecoptgt20down: reusing w_HasElElFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation el_looserecoptlt20up: reusing w_HasElElFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation el_looserecoptlt20down: reusing w_HasElElFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Defining myCol49 as myFun33(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol34, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol50 as myFun33(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol35, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol52 as myFun24(myCol10, myCol7)
DEBUG:bamboo.dataframebackend:Defining myCol51 as myFun34(Electron_eta, Electron_mass, Electron_phi, Electron_pt, Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol52, nElectron, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol54 as myFun35(Electron_charge, myCol6, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol53 as myFun36(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol54, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol56 as myFun35(Muon_charge, myCol10, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol55 as myFun37(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol56, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( ( ! ( -1 != myCol49 ) ) && ( ! ( -1 != myCol50 ) ) && ( ! ( -1 != myCol51 ) ) && ( ! ( -1 != myCol53 ) ) && ( ! ( -1 != myCol55 ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation ttbarweightsystup: reusing w_HasMuMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation ttbarweightsystdown: reusing w_HasMuMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation L1PreFiringup: reusing w_HasMuMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation L1PreFiringdown: reusing w_HasMuMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation pileupup: reusing w_HasMuMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation pileupdown: reusing w_HasMuMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation jerup: reusing w_HasMuMuFakeable__jerup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation jerdown: reusing w_HasMuMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation jesTotalup: reusing w_HasMuMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation jesTotaldown: reusing w_HasMuMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation btag_ratioup: reusing w_HasMuMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation btag_ratiodown: reusing w_HasMuMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleMuon_trigSFup', 'ttH_doubleMuon_trigSFdown'] for systematic ttH_doubleMuon_trigSF
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation ttH_doubleMuon_trigSFup: reusing w_HasMuMuFakeable__ttH_doubleMuon_trigSFup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation ttH_doubleMuon_trigSFdown: reusing w_HasMuMuFakeable__ttH_doubleMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation mu_looseup: reusing w_HasMuMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation mu_loosedown: reusing w_HasMuMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Defining myCol57 as myFun33(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol34, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol58 as myFun33(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol35, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol59 as myFun34(Electron_eta, Electron_mass, Electron_phi, Electron_pt, Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol36, nElectron, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol61 as myFun35(Electron_charge, myCol6, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol60 as myFun36(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol61, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol63 as myFun35(Muon_charge, myCol10, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol62 as myFun37(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol63, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( ( ! ( -1 != myCol57 ) ) && ( ! ( -1 != myCol58 ) ) && ( ! ( -1 != myCol59 ) ) && ( ! ( -1 != myCol60 ) ) && ( ! ( -1 != myCol62 ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation ttbarweightsystup: reusing w_HasElMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation ttbarweightsystdown: reusing w_HasElMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation L1PreFiringup: reusing w_HasElMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation L1PreFiringdown: reusing w_HasElMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation pileupup: reusing w_HasElMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation pileupdown: reusing w_HasElMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation jerup: reusing w_HasElMuFakeable__jerup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation jerdown: reusing w_HasElMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation jesTotalup: reusing w_HasElMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation jesTotaldown: reusing w_HasElMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation btag_ratioup: reusing w_HasElMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation btag_ratiodown: reusing w_HasElMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_electronMuon_trigSFup', 'ttH_electronMuon_trigSFdown'] for systematic ttH_electronMuon_trigSF
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation ttH_electronMuon_trigSFup: reusing w_HasElMuFakeable__ttH_electronMuon_trigSFup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation ttH_electronMuon_trigSFdown: reusing w_HasElMuFakeable__ttH_electronMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation el_looseidup: reusing w_HasElMuFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation el_looseiddown: reusing w_HasElMuFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation el_looseeffup: reusing w_HasElMuFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation el_looseeffdown: reusing w_HasElMuFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation el_looserecoptgt20up: reusing w_HasElMuFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation el_looserecoptgt20down: reusing w_HasElMuFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation el_looserecoptlt20up: reusing w_HasElMuFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation el_looserecoptlt20down: reusing w_HasElMuFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation mu_looseup: reusing w_HasElMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation mu_loosedown: reusing w_HasElMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation ttbarweightsystup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation ttbarweightsystdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation pileupup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation pileupdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation jerup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation jerdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation jesTotalup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation jesTotaldown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation btag_ratioup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation btag_ratiodown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation ttH_doubleElectron_trigSFup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttH_doubleElectron_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation ttH_doubleElectron_trigSFdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttH_doubleElectron_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation el_looseidup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation el_looseiddown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation el_looseeffup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation el_looseeffdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation el_looserecoptgt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation el_looserecoptgt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation el_looserecoptlt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation el_looserecoptlt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation ttbarweightsystup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation ttbarweightsystdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation pileupup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation pileupdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation jerup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation jerdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation jesTotalup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation jesTotaldown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation btag_ratioup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation btag_ratiodown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation ttH_doubleMuon_trigSFup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttH_doubleMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation ttH_doubleMuon_trigSFdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttH_doubleMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation mu_looseup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation mu_loosedown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation ttbarweightsystup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation ttbarweightsystdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation pileupup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation pileupdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation jerup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation jerdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation jesTotalup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation jesTotaldown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation btag_ratioup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation btag_ratiodown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation ttH_electronMuon_trigSFup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttH_electronMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation ttH_electronMuon_trigSFdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttH_electronMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation el_looseidup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation el_looseiddown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation el_looseeffup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation el_looseeffdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation el_looserecoptgt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation el_looserecoptgt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation el_looserecoptlt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation el_looserecoptlt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation mu_looseup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation mu_loosedown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun38(const ROOT::VecOps::RVec<Bool_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<std::size_t>& myArg2, const UInt_t& myArg3)
{
  return rdfhelpers::select(myArg2,
    [&myArg0, &myArg1, &myArg2, &myArg3] ( std::size_t i0 ) { return ( ( myArg1[i0] >= 0.85 ) && myArg0[i0] ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol64 as myFun38(Muon_mediumId, Muon_mvaTTH, myCol13, nMuon)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun39(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<std::size_t>& myArg1, const UInt_t& myArg2)
{
  return rdfhelpers::select(myArg1,
    [&myArg0, &myArg1, &myArg2] ( std::size_t i0 ) { return ( myArg0[i0] >= 0.8 ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol65 as myFun39(Electron_mvaTTH, myCol5, nElectron)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol64.size() + myCol65.size() ) <= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation ttbarweightsystup: reusing w_HasElElFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation ttbarweightsystdown: reusing w_HasElElFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringup: reusing w_HasElElFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringdown: reusing w_HasElElFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation pileupup: reusing w_HasElElFakeable__pileupup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation pileupdown: reusing w_HasElElFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation jerup: reusing w_HasElElFakeable__jerup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation jerdown: reusing w_HasElElFakeable__jerdown
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation jesTotalup: reusing w_HasElElFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation jesTotaldown: reusing w_HasElElFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation btag_ratioup: reusing w_HasElElFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation btag_ratiodown: reusing w_HasElElFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleElectron_trigSFup', 'ttH_doubleElectron_trigSFdown'] for systematic ttH_doubleElectron_trigSF
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation ttH_doubleElectron_trigSFup: reusing w_HasElElFakeable__ttH_doubleElectron_trigSFup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation ttH_doubleElectron_trigSFdown: reusing w_HasElElFakeable__ttH_doubleElectron_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation el_looseidup: reusing w_HasElElFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation el_looseiddown: reusing w_HasElElFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation el_looseeffup: reusing w_HasElElFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation el_looseeffdown: reusing w_HasElElFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation el_looserecoptgt20up: reusing w_HasElElFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation el_looserecoptgt20down: reusing w_HasElElFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation el_looserecoptlt20up: reusing w_HasElElFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation el_looserecoptlt20down: reusing w_HasElElFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Defining myCol66 as myFun38(Muon_mediumId, Muon_mvaTTH, myCol13, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol67 as myFun39(Electron_mvaTTH, myCol5, nElectron)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol66.size() + myCol67.size() ) <= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation ttbarweightsystup: reusing w_HasMuMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation ttbarweightsystdown: reusing w_HasMuMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringup: reusing w_HasMuMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringdown: reusing w_HasMuMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation pileupup: reusing w_HasMuMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation pileupdown: reusing w_HasMuMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation jerup: reusing w_HasMuMuFakeable__jerup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation jerdown: reusing w_HasMuMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation jesTotalup: reusing w_HasMuMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation jesTotaldown: reusing w_HasMuMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation btag_ratioup: reusing w_HasMuMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation btag_ratiodown: reusing w_HasMuMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleMuon_trigSFup', 'ttH_doubleMuon_trigSFdown'] for systematic ttH_doubleMuon_trigSF
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation ttH_doubleMuon_trigSFup: reusing w_HasMuMuFakeable__ttH_doubleMuon_trigSFup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation ttH_doubleMuon_trigSFdown: reusing w_HasMuMuFakeable__ttH_doubleMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation mu_looseup: reusing w_HasMuMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation mu_loosedown: reusing w_HasMuMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Defining myCol68 as myFun38(Muon_mediumId, Muon_mvaTTH, myCol13, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol69 as myFun39(Electron_mvaTTH, myCol5, nElectron)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol68.size() + myCol69.size() ) <= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation ttbarweightsystup: reusing w_HasElMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation ttbarweightsystdown: reusing w_HasElMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringup: reusing w_HasElMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringdown: reusing w_HasElMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation pileupup: reusing w_HasElMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation pileupdown: reusing w_HasElMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation jerup: reusing w_HasElMuFakeable__jerup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation jerdown: reusing w_HasElMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation jesTotalup: reusing w_HasElMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation jesTotaldown: reusing w_HasElMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation btag_ratioup: reusing w_HasElMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation btag_ratiodown: reusing w_HasElMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_electronMuon_trigSFup', 'ttH_electronMuon_trigSFdown'] for systematic ttH_electronMuon_trigSF
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation ttH_electronMuon_trigSFup: reusing w_HasElMuFakeable__ttH_electronMuon_trigSFup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation ttH_electronMuon_trigSFdown: reusing w_HasElMuFakeable__ttH_electronMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation el_looseidup: reusing w_HasElMuFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation el_looseiddown: reusing w_HasElMuFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation el_looseeffup: reusing w_HasElMuFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation el_looseeffdown: reusing w_HasElMuFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation el_looserecoptgt20up: reusing w_HasElMuFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation el_looserecoptgt20down: reusing w_HasElMuFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation el_looserecoptlt20up: reusing w_HasElMuFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation el_looserecoptlt20down: reusing w_HasElMuFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation mu_looseup: reusing w_HasElMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation mu_loosedown: reusing w_HasElMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation ttbarweightsystup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation ttbarweightsystdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation pileupup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation pileupdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation jerup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation jerdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation jesTotalup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation jesTotaldown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation btag_ratioup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation btag_ratiodown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation ttH_doubleElectron_trigSFup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttH_doubleElectron_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation ttH_doubleElectron_trigSFdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__ttH_doubleElectron_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation el_looseidup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation el_looseiddown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation el_looseeffup with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation el_looseeffdown with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation el_looserecoptgt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation el_looserecoptgt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation el_looserecoptlt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation el_looserecoptlt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation ttbarweightsystup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation ttbarweightsystdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation pileupup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation pileupdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation jerup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation jerdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation jesTotalup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation jesTotaldown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation btag_ratioup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation btag_ratiodown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation ttH_doubleMuon_trigSFup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttH_doubleMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation ttH_doubleMuon_trigSFdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__ttH_doubleMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation mu_looseup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation mu_loosedown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation ttbarweightsystup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation ttbarweightsystdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation pileupup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation pileupdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation jerup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation jerdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation jesTotalup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation jesTotaldown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation btag_ratioup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation btag_ratiodown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation ttH_electronMuon_trigSFup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttH_electronMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation ttH_electronMuon_trigSFdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__ttH_electronMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation el_looseidup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation el_looseiddown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation el_looseeffup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation el_looseeffdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation el_looserecoptgt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation el_looserecoptgt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation el_looserecoptlt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation el_looserecoptlt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation mu_looseup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation mu_loosedown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun40(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<UChar_t>& myArg1, const ROOT::VecOps::RVec<rdfhelpers::Combination<2>>& myArg2, const ROOT::VecOps::RVec<std::size_t>& myArg3, const UInt_t& myArg4)
{
  return rdfhelpers::select(rdfhelpers::IndexRange<std::size_t>{myArg2.size()},
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4] ( std::size_t i5 ) { return ( ( ( ( myArg1[myArg3[myArg2[i5].get(0)]] == 1 ) || ( myArg1[myArg3[myArg2[i5].get(0)]] == 15 ) || ( myArg1[myArg3[myArg2[i5].get(0)]] == 22 ) ) && ( ( myArg1[myArg3[myArg2[i5].get(1)]] == 1 ) || ( myArg1[myArg3[myArg2[i5].get(1)]] == 15 ) || ( myArg1[myArg3[myArg2[i5].get(1)]] == 22 ) ) ) && ( myArg0[myArg3[myArg2[i5].get(0)]] >= 0.8 ) && ( myArg0[myArg3[myArg2[i5].get(1)]] >= 0.8 ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol70 as myFun40(Electron_mvaTTH, Electron_genPartFlav, myCol37, myCol5, nElectron)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol70.size() >= 1 )
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: const ScaleFactor myFun41{"/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/ScaleFactors_ttH/TTHSF_EGamma_SF2D_ElectronTight2016.json"};
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight as ( w_HasElElFakeable * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation ttbarweightsystup: defining new weight based on w_HasElElFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__ttbarweightsystup as ( w_HasElElFakeable__ttbarweightsystup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation ttbarweightsystdown: defining new weight based on w_HasElElFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__ttbarweightsystdown as ( w_HasElElFakeable__ttbarweightsystdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation L1PreFiringup: defining new weight based on w_HasElElFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__L1PreFiringup as ( w_HasElElFakeable__L1PreFiringup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation L1PreFiringdown: defining new weight based on w_HasElElFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__L1PreFiringdown as ( w_HasElElFakeable__L1PreFiringdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation pileupup: defining new weight based on w_HasElElFakeable__pileupup
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__pileupup as ( w_HasElElFakeable__pileupup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation pileupdown: defining new weight based on w_HasElElFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__pileupdown as ( w_HasElElFakeable__pileupdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation jerup: defining new weight based on w_HasElElFakeable__jerup
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__jerup as ( w_HasElElFakeable__jerup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation jerdown: defining new weight based on w_HasElElFakeable__jerdown
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__jerdown as ( w_HasElElFakeable__jerdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation jesTotalup: defining new weight based on w_HasElElFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__jesTotalup as ( w_HasElElFakeable__jesTotalup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation jesTotaldown: defining new weight based on w_HasElElFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__jesTotaldown as ( w_HasElElFakeable__jesTotaldown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation btag_ratioup: defining new weight based on w_HasElElFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__btag_ratioup as ( w_HasElElFakeable__btag_ratioup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation btag_ratiodown: defining new weight based on w_HasElElFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__btag_ratiodown as ( w_HasElElFakeable__btag_ratiodown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleElectron_trigSFup', 'ttH_doubleElectron_trigSFdown'] for systematic ttH_doubleElectron_trigSF
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation ttH_doubleElectron_trigSFup: defining new weight based on w_HasElElFakeable__ttH_doubleElectron_trigSFup
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__ttH_doubleElectron_trigSFup as ( w_HasElElFakeable__ttH_doubleElectron_trigSFup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation ttH_doubleElectron_trigSFdown: defining new weight based on w_HasElElFakeable__ttH_doubleElectron_trigSFdown
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__ttH_doubleElectron_trigSFdown as ( w_HasElElFakeable__ttH_doubleElectron_trigSFdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation el_looseidup: defining new weight based on w_HasElElFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__el_looseidup as ( w_HasElElFakeable__el_looseidup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation el_looseiddown: defining new weight based on w_HasElElFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__el_looseiddown as ( w_HasElElFakeable__el_looseiddown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation el_looseeffup: defining new weight based on w_HasElElFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__el_looseeffup as ( w_HasElElFakeable__el_looseeffup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation el_looseeffdown: defining new weight based on w_HasElElFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__el_looseeffdown as ( w_HasElElFakeable__el_looseeffdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation el_looserecoptgt20up: defining new weight based on w_HasElElFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__el_looserecoptgt20up as ( w_HasElElFakeable__el_looserecoptgt20up * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation el_looserecoptgt20down: defining new weight based on w_HasElElFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__el_looserecoptgt20down as ( w_HasElElFakeable__el_looserecoptgt20down * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation el_looserecoptlt20up: defining new weight based on w_HasElElFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__el_looserecoptlt20up as ( w_HasElElFakeable__el_looserecoptlt20up * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation el_looserecoptlt20down: defining new weight based on w_HasElElFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__el_looserecoptlt20down as ( w_HasElElFakeable__el_looserecoptlt20down * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_tightmvaup', 'el_tightmvadown'] for systematic el_tightmva
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation el_tightmvaup: defining new weight based on w_HasElElFakeable
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__el_tightmvaup as ( w_HasElElFakeable * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Up) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Up) )
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation el_tightmvadown: defining new weight based on w_HasElElFakeable
DEBUG:bamboo.dataframebackend:Defining w_HasElElTight__el_tightmvadown as ( w_HasElElFakeable * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(0)]] } }}, Down) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol37[myCol70[0]].get(1)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol37[myCol70[0]].get(1)]] } }}, Down) )
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun42(const ROOT::VecOps::RVec<Bool_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<UChar_t>& myArg2, const ROOT::VecOps::RVec<rdfhelpers::Combination<2>>& myArg3, const ROOT::VecOps::RVec<std::size_t>& myArg4, const UInt_t& myArg5)
{
  return rdfhelpers::select(rdfhelpers::IndexRange<std::size_t>{myArg3.size()},
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5] ( std::size_t i4 ) { return ( ( ( ( myArg2[myArg4[myArg3[i4].get(0)]] == 1 ) || ( myArg2[myArg4[myArg3[i4].get(0)]] == 15 ) || ( myArg2[myArg4[myArg3[i4].get(0)]] == 22 ) ) && ( ( myArg2[myArg4[myArg3[i4].get(1)]] == 1 ) || ( myArg2[myArg4[myArg3[i4].get(1)]] == 15 ) || ( myArg2[myArg4[myArg3[i4].get(1)]] == 22 ) ) ) && ( ( myArg1[myArg4[myArg3[i4].get(0)]] >= 0.85 ) && myArg0[myArg4[myArg3[i4].get(0)]] ) && ( ( myArg1[myArg4[myArg3[i4].get(1)]] >= 0.85 ) && myArg0[myArg4[myArg3[i4].get(1)]] ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol71 as myFun42(Muon_mediumId, Muon_mvaTTH, Muon_genPartFlav, myCol38, myCol13, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol71.size() >= 1 )
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: const ScaleFactor myFun43{"/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/ScaleFactors_ttH/TTHSF_EGamma_SF2D_MuonTight2016.json"};
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight as ( w_HasMuMuFakeable * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation ttbarweightsystup: defining new weight based on w_HasMuMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__ttbarweightsystup as ( w_HasMuMuFakeable__ttbarweightsystup * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation ttbarweightsystdown: defining new weight based on w_HasMuMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__ttbarweightsystdown as ( w_HasMuMuFakeable__ttbarweightsystdown * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation L1PreFiringup: defining new weight based on w_HasMuMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__L1PreFiringup as ( w_HasMuMuFakeable__L1PreFiringup * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation L1PreFiringdown: defining new weight based on w_HasMuMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__L1PreFiringdown as ( w_HasMuMuFakeable__L1PreFiringdown * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation pileupup: defining new weight based on w_HasMuMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__pileupup as ( w_HasMuMuFakeable__pileupup * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation pileupdown: defining new weight based on w_HasMuMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__pileupdown as ( w_HasMuMuFakeable__pileupdown * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation jerup: defining new weight based on w_HasMuMuFakeable__jerup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__jerup as ( w_HasMuMuFakeable__jerup * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation jerdown: defining new weight based on w_HasMuMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__jerdown as ( w_HasMuMuFakeable__jerdown * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation jesTotalup: defining new weight based on w_HasMuMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__jesTotalup as ( w_HasMuMuFakeable__jesTotalup * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation jesTotaldown: defining new weight based on w_HasMuMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__jesTotaldown as ( w_HasMuMuFakeable__jesTotaldown * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation btag_ratioup: defining new weight based on w_HasMuMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__btag_ratioup as ( w_HasMuMuFakeable__btag_ratioup * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation btag_ratiodown: defining new weight based on w_HasMuMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__btag_ratiodown as ( w_HasMuMuFakeable__btag_ratiodown * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleMuon_trigSFup', 'ttH_doubleMuon_trigSFdown'] for systematic ttH_doubleMuon_trigSF
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation ttH_doubleMuon_trigSFup: defining new weight based on w_HasMuMuFakeable__ttH_doubleMuon_trigSFup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__ttH_doubleMuon_trigSFup as ( w_HasMuMuFakeable__ttH_doubleMuon_trigSFup * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation ttH_doubleMuon_trigSFdown: defining new weight based on w_HasMuMuFakeable__ttH_doubleMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__ttH_doubleMuon_trigSFdown as ( w_HasMuMuFakeable__ttH_doubleMuon_trigSFdown * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation mu_looseup: defining new weight based on w_HasMuMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__mu_looseup as ( w_HasMuMuFakeable__mu_looseup * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation mu_loosedown: defining new weight based on w_HasMuMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__mu_loosedown as ( w_HasMuMuFakeable__mu_loosedown * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_tightmvaup', 'mu_tightmvadown'] for systematic mu_tightmva
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation mu_tightmvaup: defining new weight based on w_HasMuMuFakeable
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__mu_tightmvaup as ( w_HasMuMuFakeable * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Up) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Up) )
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation mu_tightmvadown: defining new weight based on w_HasMuMuFakeable
DEBUG:bamboo.dataframebackend:Defining w_HasMuMuTight__mu_tightmvadown as ( w_HasMuMuFakeable * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(0)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(0)]] } }}, Down) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol38[myCol71[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol38[myCol71[0]].get(1)]] } }}, Down) )
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun44(const ROOT::VecOps::RVec<Bool_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<UChar_t>& myArg3, const ROOT::VecOps::RVec<UChar_t>& myArg4, const ROOT::VecOps::RVec<rdfhelpers::Combination<2>>& myArg5, const ROOT::VecOps::RVec<std::size_t>& myArg6, const ROOT::VecOps::RVec<std::size_t>& myArg7, const UInt_t& myArg8, const UInt_t& myArg9)
{
  return rdfhelpers::select(rdfhelpers::IndexRange<std::size_t>{myArg5.size()},
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8, &myArg9] ( std::size_t i3 ) { return ( ( ( ( myArg3[myArg7[myArg5[i3].get(0)]] == 1 ) || ( myArg3[myArg7[myArg5[i3].get(0)]] == 15 ) || ( myArg3[myArg7[myArg5[i3].get(0)]] == 22 ) ) && ( ( myArg4[myArg6[myArg5[i3].get(1)]] == 1 ) || ( myArg4[myArg6[myArg5[i3].get(1)]] == 15 ) || ( myArg4[myArg6[myArg5[i3].get(1)]] == 22 ) ) ) && ( myArg1[myArg7[myArg5[i3].get(0)]] >= 0.8 ) && ( ( myArg2[myArg6[myArg5[i3].get(1)]] >= 0.85 ) && myArg0[myArg6[myArg5[i3].get(1)]] ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol72 as myFun44(Muon_mediumId, Electron_mvaTTH, Muon_mvaTTH, Electron_genPartFlav, Muon_genPartFlav, myCol39, myCol13, myCol5, nElectron, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol72.size() >= 1 )
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight as ( w_HasElMuFakeable * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation ttbarweightsystup: defining new weight based on w_HasElMuFakeable__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__ttbarweightsystup as ( w_HasElMuFakeable__ttbarweightsystup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation ttbarweightsystdown: defining new weight based on w_HasElMuFakeable__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__ttbarweightsystdown as ( w_HasElMuFakeable__ttbarweightsystdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation L1PreFiringup: defining new weight based on w_HasElMuFakeable__L1PreFiringup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__L1PreFiringup as ( w_HasElMuFakeable__L1PreFiringup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation L1PreFiringdown: defining new weight based on w_HasElMuFakeable__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__L1PreFiringdown as ( w_HasElMuFakeable__L1PreFiringdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation pileupup: defining new weight based on w_HasElMuFakeable__pileupup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__pileupup as ( w_HasElMuFakeable__pileupup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation pileupdown: defining new weight based on w_HasElMuFakeable__pileupdown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__pileupdown as ( w_HasElMuFakeable__pileupdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation jerup: defining new weight based on w_HasElMuFakeable__jerup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__jerup as ( w_HasElMuFakeable__jerup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation jerdown: defining new weight based on w_HasElMuFakeable__jerdown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__jerdown as ( w_HasElMuFakeable__jerdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation jesTotalup: defining new weight based on w_HasElMuFakeable__jesTotalup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__jesTotalup as ( w_HasElMuFakeable__jesTotalup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation jesTotaldown: defining new weight based on w_HasElMuFakeable__jesTotaldown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__jesTotaldown as ( w_HasElMuFakeable__jesTotaldown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation btag_ratioup: defining new weight based on w_HasElMuFakeable__btag_ratioup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__btag_ratioup as ( w_HasElMuFakeable__btag_ratioup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation btag_ratiodown: defining new weight based on w_HasElMuFakeable__btag_ratiodown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__btag_ratiodown as ( w_HasElMuFakeable__btag_ratiodown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_electronMuon_trigSFup', 'ttH_electronMuon_trigSFdown'] for systematic ttH_electronMuon_trigSF
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation ttH_electronMuon_trigSFup: defining new weight based on w_HasElMuFakeable__ttH_electronMuon_trigSFup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__ttH_electronMuon_trigSFup as ( w_HasElMuFakeable__ttH_electronMuon_trigSFup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation ttH_electronMuon_trigSFdown: defining new weight based on w_HasElMuFakeable__ttH_electronMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__ttH_electronMuon_trigSFdown as ( w_HasElMuFakeable__ttH_electronMuon_trigSFdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation el_looseidup: defining new weight based on w_HasElMuFakeable__el_looseidup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__el_looseidup as ( w_HasElMuFakeable__el_looseidup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation el_looseiddown: defining new weight based on w_HasElMuFakeable__el_looseiddown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__el_looseiddown as ( w_HasElMuFakeable__el_looseiddown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation el_looseeffup: defining new weight based on w_HasElMuFakeable__el_looseeffup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__el_looseeffup as ( w_HasElMuFakeable__el_looseeffup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation el_looseeffdown: defining new weight based on w_HasElMuFakeable__el_looseeffdown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__el_looseeffdown as ( w_HasElMuFakeable__el_looseeffdown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation el_looserecoptgt20up: defining new weight based on w_HasElMuFakeable__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__el_looserecoptgt20up as ( w_HasElMuFakeable__el_looserecoptgt20up * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation el_looserecoptgt20down: defining new weight based on w_HasElMuFakeable__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__el_looserecoptgt20down as ( w_HasElMuFakeable__el_looserecoptgt20down * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation el_looserecoptlt20up: defining new weight based on w_HasElMuFakeable__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__el_looserecoptlt20up as ( w_HasElMuFakeable__el_looserecoptlt20up * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation el_looserecoptlt20down: defining new weight based on w_HasElMuFakeable__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__el_looserecoptlt20down as ( w_HasElMuFakeable__el_looserecoptlt20down * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation mu_looseup: defining new weight based on w_HasElMuFakeable__mu_looseup
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__mu_looseup as ( w_HasElMuFakeable__mu_looseup * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation mu_loosedown: defining new weight based on w_HasElMuFakeable__mu_loosedown
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__mu_loosedown as ( w_HasElMuFakeable__mu_loosedown * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_tightmvaup', 'el_tightmvadown'] for systematic el_tightmva
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation el_tightmvaup: defining new weight based on w_HasElMuFakeable
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__el_tightmvaup as ( w_HasElMuFakeable * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Up) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation el_tightmvadown: defining new weight based on w_HasElMuFakeable
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__el_tightmvadown as ( w_HasElMuFakeable * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Nominal) * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Down) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_tightmvaup', 'mu_tightmvadown'] for systematic mu_tightmva
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation mu_tightmvaup: defining new weight based on w_HasElMuFakeable
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__mu_tightmvaup as ( w_HasElMuFakeable * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Up) )
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation mu_tightmvadown: defining new weight based on w_HasElMuFakeable
DEBUG:bamboo.dataframebackend:Defining w_HasElMuTight__mu_tightmvadown as ( w_HasElMuFakeable * myFun41.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Electron_eta[myCol5[myCol39[myCol72[0]].get(0)]] ) }, { BinningVariable::Pt, Electron_pt[myCol5[myCol39[myCol72[0]].get(0)]] } }}, Nominal) * myFun43.get(Parameters{{ { BinningVariable::AbsEta, std::abs( Muon_eta[myCol13[myCol39[myCol72[0]].get(1)]] ) }, { BinningVariable::Pt, Muon_pt[myCol13[myCol39[myCol72[0]].get(1)]] } }}, Down) )
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight with variables v0_Yield_HasElElPreselected and weight w_HasElElTight
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation ttbarweightsystup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation ttbarweightsystdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation pileupup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation pileupdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation jerup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation jerdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation jesTotalup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation jesTotaldown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation btag_ratioup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation btag_ratiodown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation ttH_doubleElectron_trigSFup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttH_doubleElectron_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation ttH_doubleElectron_trigSFdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttH_doubleElectron_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation el_looseidup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation el_looseiddown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation el_looseeffup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation el_looseeffdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation el_looserecoptgt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation el_looserecoptgt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation el_looserecoptlt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation el_looserecoptlt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation el_tightmvaup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation el_tightmvadown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_tightmvadown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation ttbarweightsystup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation ttbarweightsystdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation pileupup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation pileupdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation jerup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation jerdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation jesTotalup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation jesTotaldown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation btag_ratioup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation btag_ratiodown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation ttH_doubleMuon_trigSFup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttH_doubleMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation ttH_doubleMuon_trigSFdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttH_doubleMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation mu_looseup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation mu_loosedown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation mu_tightmvaup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation mu_tightmvadown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_tightmvadown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation ttbarweightsystup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation ttbarweightsystdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation pileupup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation pileupdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation jerup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation jerdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation jesTotalup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation jesTotaldown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation btag_ratioup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation btag_ratiodown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation ttH_electronMuon_trigSFup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttH_electronMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation ttH_electronMuon_trigSFdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttH_electronMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation el_looseidup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation el_looseiddown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation el_looseeffup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation el_looseeffdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation el_looserecoptgt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation el_looserecoptgt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation el_looserecoptlt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation el_looserecoptlt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation mu_looseup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation mu_loosedown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation el_tightmvaup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation el_tightmvadown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_tightmvadown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation mu_tightmvaup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation mu_tightmvadown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_tightmvadown
DEBUG:bamboo.dataframebackend:Filtering with ( myCol15.size() >= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation ttbarweightsystup: reusing w_HasElElTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation ttbarweightsystdown: reusing w_HasElElTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation L1PreFiringup: reusing w_HasElElTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation L1PreFiringdown: reusing w_HasElElTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation pileupup: reusing w_HasElElTight__pileupup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation pileupdown: reusing w_HasElElTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:Filtering with ( myCol19.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation jerup: reusing w_HasElElTight__jerup
DEBUG:bamboo.dataframebackend:Filtering with ( myCol23.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation jerdown: reusing w_HasElElTight__jerdown
DEBUG:bamboo.dataframebackend:Filtering with ( myCol27.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation jesTotalup: reusing w_HasElElTight__jesTotalup
DEBUG:bamboo.dataframebackend:Filtering with ( myCol31.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation jesTotaldown: reusing w_HasElElTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation btag_ratioup: reusing w_HasElElTight__btag_ratioup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation btag_ratiodown: reusing w_HasElElTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleElectron_trigSFup', 'ttH_doubleElectron_trigSFdown'] for systematic ttH_doubleElectron_trigSF
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation ttH_doubleElectron_trigSFup: reusing w_HasElElTight__ttH_doubleElectron_trigSFup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation ttH_doubleElectron_trigSFdown: reusing w_HasElElTight__ttH_doubleElectron_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation el_looseidup: reusing w_HasElElTight__el_looseidup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation el_looseiddown: reusing w_HasElElTight__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation el_looseeffup: reusing w_HasElElTight__el_looseeffup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation el_looseeffdown: reusing w_HasElElTight__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation el_looserecoptgt20up: reusing w_HasElElTight__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation el_looserecoptgt20down: reusing w_HasElElTight__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation el_looserecoptlt20up: reusing w_HasElElTight__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation el_looserecoptlt20down: reusing w_HasElElTight__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_tightmvaup', 'el_tightmvadown'] for systematic el_tightmva
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation el_tightmvaup: reusing w_HasElElTight__el_tightmvaup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation el_tightmvadown: reusing w_HasElElTight__el_tightmvadown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets with variables v0_Yield_HasElElPreselected and weight w_HasElElTight
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation ttbarweightsystup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation ttbarweightsystdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation pileupup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation pileupdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation jerup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation jerdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation jesTotalup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation jesTotaldown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation btag_ratioup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation btag_ratiodown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation ttH_doubleElectron_trigSFup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttH_doubleElectron_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation ttH_doubleElectron_trigSFdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttH_doubleElectron_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation el_looseidup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation el_looseiddown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation el_looseeffup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation el_looseeffdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation el_looserecoptgt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation el_looserecoptgt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation el_looserecoptlt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation el_looserecoptlt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation el_tightmvaup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation el_tightmvadown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_tightmvadown
DEBUG:bamboo.dataframebackend:Filtering with ( myCol15.size() >= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation ttbarweightsystup: reusing w_HasMuMuTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation ttbarweightsystdown: reusing w_HasMuMuTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation L1PreFiringup: reusing w_HasMuMuTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation L1PreFiringdown: reusing w_HasMuMuTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation pileupup: reusing w_HasMuMuTight__pileupup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation pileupdown: reusing w_HasMuMuTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:Filtering with ( myCol19.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation jerup: reusing w_HasMuMuTight__jerup
DEBUG:bamboo.dataframebackend:Filtering with ( myCol23.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation jerdown: reusing w_HasMuMuTight__jerdown
DEBUG:bamboo.dataframebackend:Filtering with ( myCol27.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation jesTotalup: reusing w_HasMuMuTight__jesTotalup
DEBUG:bamboo.dataframebackend:Filtering with ( myCol31.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation jesTotaldown: reusing w_HasMuMuTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation btag_ratioup: reusing w_HasMuMuTight__btag_ratioup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation btag_ratiodown: reusing w_HasMuMuTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleMuon_trigSFup', 'ttH_doubleMuon_trigSFdown'] for systematic ttH_doubleMuon_trigSF
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation ttH_doubleMuon_trigSFup: reusing w_HasMuMuTight__ttH_doubleMuon_trigSFup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation ttH_doubleMuon_trigSFdown: reusing w_HasMuMuTight__ttH_doubleMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation mu_looseup: reusing w_HasMuMuTight__mu_looseup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation mu_loosedown: reusing w_HasMuMuTight__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_tightmvaup', 'mu_tightmvadown'] for systematic mu_tightmva
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation mu_tightmvaup: reusing w_HasMuMuTight__mu_tightmvaup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation mu_tightmvadown: reusing w_HasMuMuTight__mu_tightmvadown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation ttbarweightsystup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation ttbarweightsystdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation pileupup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation pileupdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation jerup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation jerdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation jesTotalup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation jesTotaldown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation btag_ratioup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation btag_ratiodown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation ttH_doubleMuon_trigSFup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttH_doubleMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation ttH_doubleMuon_trigSFdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttH_doubleMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation mu_looseup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation mu_loosedown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation mu_tightmvaup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation mu_tightmvadown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_tightmvadown
DEBUG:bamboo.dataframebackend:Filtering with ( myCol15.size() >= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation ttbarweightsystup: reusing w_HasElMuTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation ttbarweightsystdown: reusing w_HasElMuTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation L1PreFiringup: reusing w_HasElMuTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation L1PreFiringdown: reusing w_HasElMuTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation pileupup: reusing w_HasElMuTight__pileupup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation pileupdown: reusing w_HasElMuTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:Filtering with ( myCol19.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation jerup: reusing w_HasElMuTight__jerup
DEBUG:bamboo.dataframebackend:Filtering with ( myCol23.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation jerdown: reusing w_HasElMuTight__jerdown
DEBUG:bamboo.dataframebackend:Filtering with ( myCol27.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation jesTotalup: reusing w_HasElMuTight__jesTotalup
DEBUG:bamboo.dataframebackend:Filtering with ( myCol31.size() >= 2 )
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation jesTotaldown: reusing w_HasElMuTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation btag_ratioup: reusing w_HasElMuTight__btag_ratioup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation btag_ratiodown: reusing w_HasElMuTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_electronMuon_trigSFup', 'ttH_electronMuon_trigSFdown'] for systematic ttH_electronMuon_trigSF
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation ttH_electronMuon_trigSFup: reusing w_HasElMuTight__ttH_electronMuon_trigSFup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation ttH_electronMuon_trigSFdown: reusing w_HasElMuTight__ttH_electronMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation el_looseidup: reusing w_HasElMuTight__el_looseidup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation el_looseiddown: reusing w_HasElMuTight__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation el_looseeffup: reusing w_HasElMuTight__el_looseeffup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation el_looseeffdown: reusing w_HasElMuTight__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation el_looserecoptgt20up: reusing w_HasElMuTight__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation el_looserecoptgt20down: reusing w_HasElMuTight__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation el_looserecoptlt20up: reusing w_HasElMuTight__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation el_looserecoptlt20down: reusing w_HasElMuTight__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation mu_looseup: reusing w_HasElMuTight__mu_looseup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation mu_loosedown: reusing w_HasElMuTight__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_tightmvaup', 'el_tightmvadown'] for systematic el_tightmva
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation el_tightmvaup: reusing w_HasElMuTight__el_tightmvaup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation el_tightmvadown: reusing w_HasElMuTight__el_tightmvadown
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_tightmvaup', 'mu_tightmvadown'] for systematic mu_tightmva
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation mu_tightmvaup: reusing w_HasElMuTight__mu_tightmvaup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation mu_tightmvadown: reusing w_HasElMuTight__mu_tightmvadown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation ttbarweightsystup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation ttbarweightsystdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation pileupup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation pileupdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation jerup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation jerdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation jesTotalup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation jesTotaldown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation btag_ratioup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation btag_ratiodown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation ttH_electronMuon_trigSFup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttH_electronMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation ttH_electronMuon_trigSFdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttH_electronMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation el_looseidup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation el_looseiddown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation el_looseeffup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation el_looseeffdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation el_looserecoptgt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation el_looserecoptgt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation el_looserecoptlt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation el_looserecoptlt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation mu_looseup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation mu_loosedown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation el_tightmvaup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation el_tightmvadown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_tightmvadown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation mu_tightmvaup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation mu_tightmvadown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_tightmvadown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun45(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<std::size_t>& myArg1, const UInt_t& myArg2)
{
  return rdfhelpers::select(myArg1,
    [&myArg0, &myArg1, &myArg2] ( std::size_t i0 ) { return ( myArg0[i0] >  0.3093 ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol73 as myFun45(Jet_btagDeepFlavB, myCol15, nJet)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun46(const ROOT::VecOps::RVec<Float_t>& myArg0, const UInt_t& myArg1)
{
  return rdfhelpers::sort(rdfhelpers::IndexRange<std::size_t>{myArg1},
    [&myArg0, &myArg1] ( std::size_t i0 ) { return ( -myArg0[i0] ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol77 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun47(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Float_t>& myArg4, const ROOT::VecOps::RVec<Float_t>& myArg5, const ROOT::VecOps::RVec<Float_t>& myArg6, const ROOT::VecOps::RVec<Float_t>& myArg7, const ROOT::VecOps::RVec<Float_t>& myArg8, const ROOT::VecOps::RVec<Int_t>& myArg9, const ROOT::VecOps::RVec<Int_t>& myArg10, const ROOT::VecOps::RVec<Int_t>& myArg11, const ROOT::VecOps::RVec<std::size_t>& myArg12, const UInt_t& myArg13, const UInt_t& myArg14)
{
  return rdfhelpers::select(myArg12,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8, &myArg9, &myArg10, &myArg11, &myArg12, &myArg13, &myArg14] ( std::size_t i0 ) { return ( ( myArg9[i0] & 1 ) && ( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg4[i0], myArg0[i0], myArg3[i0], myArg1[i0]}.Pt() >= 200.0 ) && ( std::abs( ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<float> >{myArg4[i0], myArg0[i0], myArg3[i0], myArg1[i0]}.Eta() ) <= 2.4 ) && ( ( myArg10[i0] != -1 ) && ( myArg8[myArg10[i0]] >= 20.0 ) && ( std::abs( myArg7[myArg10[i0]] ) <= 2.4 ) && ( myArg11[i0] != -1 ) && ( myArg8[myArg11[i0]] >= 20.0 ) && ( std::abs( myArg7[myArg11[i0]] ) <= 2.4 ) ) && ( ( myArg2[i0] >= 30 ) && ( myArg2[i0] <= 210 ) ) && ( ( 1.*myArg6[i0] / myArg5[i0] ) <= 0.75 ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol76 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol77, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun48(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Float_t>& myArg4, const ROOT::VecOps::RVec<Float_t>& myArg5, const ROOT::VecOps::RVec<std::size_t>& myArg6, const ROOT::VecOps::RVec<std::size_t>& myArg7, const ROOT::VecOps::RVec<std::size_t>& myArg8, const UInt_t& myArg9, const UInt_t& myArg10, const UInt_t& myArg11)
{
  return rdfhelpers::select(myArg8,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8, &myArg9, &myArg10, &myArg11] ( std::size_t i3 ) { return ( ( ! ( -1 != rdfhelpers::next(myArg7,
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg7, &myArg9, &myArg10, i3] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg0[i0] - myArg2[i3] ), ( myArg1[i0] - myArg3[i3] )) ) <= 0.8 ); }, -1) ) ) && ( ! ( -1 != rdfhelpers::next(myArg6,
     [&myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg10, &myArg11, i3] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg4[i0] - myArg2[i3] ), ( myArg5[i0] - myArg3[i3] )) ) <= 0.8 ); }, -1) ) ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol75 as myFun48(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol13, myCol5, myCol76, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun49(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Int_t>& myArg2, const ROOT::VecOps::RVec<Int_t>& myArg3, const ROOT::VecOps::RVec<std::size_t>& myArg4, const UInt_t& myArg5, const UInt_t& myArg6)
{
  return rdfhelpers::select(myArg4,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6] ( std::size_t i0 ) { return ( ( ( myArg1[myArg2[i0]] >= 30 ) && ( myArg0[myArg2[i0]] >  0.6321 ) ) || ( ( myArg1[myArg3[i0]] >= 30 ) && ( myArg0[myArg3[i0]] >  0.6321 ) ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol74 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol75, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol73.size() >= 2 ) && ( myCol74.size() == 0 ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttbarweightsystup: reusing w_HasElElTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttbarweightsystdown: reusing w_HasElElTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringup: reusing w_HasElElTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringdown: reusing w_HasElElTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation pileupup: reusing w_HasElElTight__pileupup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation pileupdown: reusing w_HasElElTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:Defining myCol81 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol80 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol81, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol79 as myFun48(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol13, myCol5, myCol80, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol78 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol79, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol82 as myFun45(Jet_btagDeepFlavB, myCol19, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol78.size() == 0 ) && ( myCol82.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jerup: reusing w_HasElElTight__jerup
DEBUG:bamboo.dataframebackend:Defining myCol86 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol85 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol86, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol84 as myFun48(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol13, myCol5, myCol85, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol83 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol84, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol87 as myFun45(Jet_btagDeepFlavB, myCol23, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol83.size() == 0 ) && ( myCol87.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jerdown: reusing w_HasElElTight__jerdown
DEBUG:bamboo.dataframebackend:Defining myCol91 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol90 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol91, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol89 as myFun48(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol13, myCol5, myCol90, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol88 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol89, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol92 as myFun45(Jet_btagDeepFlavB, myCol27, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol88.size() == 0 ) && ( myCol92.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jesTotalup: reusing w_HasElElTight__jesTotalup
DEBUG:bamboo.dataframebackend:Defining myCol96 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol95 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol96, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol94 as myFun48(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol13, myCol5, myCol95, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol93 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol94, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol97 as myFun45(Jet_btagDeepFlavB, myCol31, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol93.size() == 0 ) && ( myCol97.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jesTotaldown: reusing w_HasElElTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation btag_ratioup: reusing w_HasElElTight__btag_ratioup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation btag_ratiodown: reusing w_HasElElTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleElectron_trigSFup', 'ttH_doubleElectron_trigSFdown'] for systematic ttH_doubleElectron_trigSF
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttH_doubleElectron_trigSFup: reusing w_HasElElTight__ttH_doubleElectron_trigSFup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttH_doubleElectron_trigSFdown: reusing w_HasElElTight__ttH_doubleElectron_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looseidup: reusing w_HasElElTight__el_looseidup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looseiddown: reusing w_HasElElTight__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looseeffup: reusing w_HasElElTight__el_looseeffup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looseeffdown: reusing w_HasElElTight__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looserecoptgt20up: reusing w_HasElElTight__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looserecoptgt20down: reusing w_HasElElTight__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looserecoptlt20up: reusing w_HasElElTight__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looserecoptlt20down: reusing w_HasElElTight__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_tightmvaup', 'el_tightmvadown'] for systematic el_tightmva
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_tightmvaup: reusing w_HasElElTight__el_tightmvaup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_tightmvadown: reusing w_HasElElTight__el_tightmvadown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags with variables v0_Yield_HasElElPreselected and weight w_HasElElTight
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttbarweightsystup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttbarweightsystdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation pileupup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation pileupdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation jerup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation jerdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation jesTotalup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation jesTotaldown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation btag_ratioup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation btag_ratiodown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttH_doubleElectron_trigSFup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttH_doubleElectron_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttH_doubleElectron_trigSFdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__ttH_doubleElectron_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looseidup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looseiddown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looseeffup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looseeffdown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looserecoptgt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looserecoptgt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looserecoptlt20up with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looserecoptlt20down with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_tightmvaup with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_tightmvadown with variables v0_Yield_HasElElPreselected and weight w_HasElElTight__el_tightmvadown
DEBUG:bamboo.dataframebackend:Defining myCol98 as myFun45(Jet_btagDeepFlavB, myCol15, nJet)
DEBUG:bamboo.dataframebackend:Defining myCol102 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol101 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol102, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun50(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Float_t>& myArg4, const ROOT::VecOps::RVec<Float_t>& myArg5, const ROOT::VecOps::RVec<std::size_t>& myArg6, const ROOT::VecOps::RVec<std::size_t>& myArg7, const ROOT::VecOps::RVec<std::size_t>& myArg8, const UInt_t& myArg9, const UInt_t& myArg10, const UInt_t& myArg11)
{
  return rdfhelpers::select(myArg6,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8, &myArg9, &myArg10, &myArg11] ( std::size_t i3 ) { return ( ( ! ( -1 != rdfhelpers::next(myArg8,
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg8, &myArg9, &myArg10, i3] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg0[i0] - myArg2[i3] ), ( myArg1[i0] - myArg3[i3] )) ) <= 0.8 ); }, -1) ) ) && ( ! ( -1 != rdfhelpers::next(myArg7,
     [&myArg2, &myArg3, &myArg4, &myArg5, &myArg7, &myArg10, &myArg11, i3] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg4[i0] - myArg2[i3] ), ( myArg5[i0] - myArg3[i3] )) ) <= 0.8 ); }, -1) ) ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol100 as myFun50(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol101, myCol13, myCol5, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol99 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol100, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol98.size() >= 2 ) && ( myCol99.size() == 0 ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttbarweightsystup: reusing w_HasMuMuTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttbarweightsystdown: reusing w_HasMuMuTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringup: reusing w_HasMuMuTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringdown: reusing w_HasMuMuTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation pileupup: reusing w_HasMuMuTight__pileupup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation pileupdown: reusing w_HasMuMuTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:Defining myCol106 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol105 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol106, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol104 as myFun50(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol105, myCol13, myCol5, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol103 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol104, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol107 as myFun45(Jet_btagDeepFlavB, myCol19, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol103.size() == 0 ) && ( myCol107.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jerup: reusing w_HasMuMuTight__jerup
DEBUG:bamboo.dataframebackend:Defining myCol111 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol110 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol111, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol109 as myFun50(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol110, myCol13, myCol5, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol108 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol109, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol112 as myFun45(Jet_btagDeepFlavB, myCol23, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol108.size() == 0 ) && ( myCol112.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jerdown: reusing w_HasMuMuTight__jerdown
DEBUG:bamboo.dataframebackend:Defining myCol116 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol115 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol116, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol114 as myFun50(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol115, myCol13, myCol5, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol113 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol114, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol117 as myFun45(Jet_btagDeepFlavB, myCol27, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol113.size() == 0 ) && ( myCol117.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jesTotalup: reusing w_HasMuMuTight__jesTotalup
DEBUG:bamboo.dataframebackend:Defining myCol121 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol120 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol121, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol119 as myFun50(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol120, myCol13, myCol5, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol118 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol119, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol122 as myFun45(Jet_btagDeepFlavB, myCol31, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol118.size() == 0 ) && ( myCol122.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jesTotaldown: reusing w_HasMuMuTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation btag_ratioup: reusing w_HasMuMuTight__btag_ratioup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation btag_ratiodown: reusing w_HasMuMuTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_doubleMuon_trigSFup', 'ttH_doubleMuon_trigSFdown'] for systematic ttH_doubleMuon_trigSF
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttH_doubleMuon_trigSFup: reusing w_HasMuMuTight__ttH_doubleMuon_trigSFup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttH_doubleMuon_trigSFdown: reusing w_HasMuMuTight__ttH_doubleMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation mu_looseup: reusing w_HasMuMuTight__mu_looseup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation mu_loosedown: reusing w_HasMuMuTight__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_tightmvaup', 'mu_tightmvadown'] for systematic mu_tightmva
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation mu_tightmvaup: reusing w_HasMuMuTight__mu_tightmvaup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation mu_tightmvadown: reusing w_HasMuMuTight__mu_tightmvadown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttbarweightsystup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttbarweightsystdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation pileupup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation pileupdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation jerup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation jerdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation jesTotalup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation jesTotaldown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation btag_ratioup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation btag_ratiodown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttH_doubleMuon_trigSFup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttH_doubleMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttH_doubleMuon_trigSFdown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__ttH_doubleMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation mu_looseup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation mu_loosedown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation mu_tightmvaup with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation mu_tightmvadown with variables v0_Yield_HasMuMuPreselected and weight w_HasMuMuTight__mu_tightmvadown
DEBUG:bamboo.dataframebackend:Defining myCol123 as myFun45(Jet_btagDeepFlavB, myCol15, nJet)
DEBUG:bamboo.dataframebackend:Defining myCol127 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol126 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol127, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol125 as myFun50(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol126, myCol13, myCol5, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol124 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol125, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol123.size() >= 2 ) && ( myCol124.size() == 0 ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttbarweightsystup', 'ttbarweightsystdown'] for systematic ttbarweightsyst
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttbarweightsystup: reusing w_HasElMuTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttbarweightsystdown: reusing w_HasElMuTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringup: reusing w_HasElMuTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringdown: reusing w_HasElMuTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['pileupup', 'pileupdown'] for systematic pileup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation pileupup: reusing w_HasElMuTight__pileupup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation pileupdown: reusing w_HasElMuTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['jerup', 'jerdown', 'jesTotalup', 'jesTotaldown'] for systematic jet
DEBUG:bamboo.dataframebackend:Defining myCol131 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol130 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol131, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun51(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Float_t>& myArg4, const ROOT::VecOps::RVec<Float_t>& myArg5, const ROOT::VecOps::RVec<std::size_t>& myArg6, const ROOT::VecOps::RVec<std::size_t>& myArg7, const ROOT::VecOps::RVec<std::size_t>& myArg8, const UInt_t& myArg9, const UInt_t& myArg10, const UInt_t& myArg11)
{
  return rdfhelpers::select(myArg7,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8, &myArg9, &myArg10, &myArg11] ( std::size_t i3 ) { return ( ( ! ( -1 != rdfhelpers::next(myArg8,
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg8, &myArg9, &myArg10, i3] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg0[i0] - myArg2[i3] ), ( myArg1[i0] - myArg3[i3] )) ) <= 0.8 ); }, -1) ) ) && ( ! ( -1 != rdfhelpers::next(myArg6,
     [&myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg10, &myArg11, i3] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg4[i0] - myArg2[i3] ), ( myArg5[i0] - myArg3[i3] )) ) <= 0.8 ); }, -1) ) ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol129 as myFun51(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol13, myCol130, myCol5, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol128 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol129, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol132 as myFun45(Jet_btagDeepFlavB, myCol19, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol128.size() == 0 ) && ( myCol132.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jerup: reusing w_HasElMuTight__jerup
DEBUG:bamboo.dataframebackend:Defining myCol136 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol135 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol136, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol134 as myFun51(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol13, myCol135, myCol5, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol133 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol134, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol137 as myFun45(Jet_btagDeepFlavB, myCol23, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol133.size() == 0 ) && ( myCol137.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jerdown: reusing w_HasElMuTight__jerdown
DEBUG:bamboo.dataframebackend:Defining myCol141 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol140 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol141, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol139 as myFun51(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol13, myCol140, myCol5, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol138 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol139, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol142 as myFun45(Jet_btagDeepFlavB, myCol27, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol138.size() == 0 ) && ( myCol142.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jesTotalup: reusing w_HasElMuTight__jesTotalup
DEBUG:bamboo.dataframebackend:Defining myCol146 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol145 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol146, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol144 as myFun51(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol13, myCol145, myCol5, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol143 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol144, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol147 as myFun45(Jet_btagDeepFlavB, myCol31, nJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol143.size() == 0 ) && ( myCol147.size() >= 2 ) )
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation jesTotaldown: reusing w_HasElMuTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding weight variations ['btag_ratioup', 'btag_ratiodown'] for systematic btag_ratio
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation btag_ratioup: reusing w_HasElMuTight__btag_ratioup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation btag_ratiodown: reusing w_HasElMuTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding weight variations ['ttH_electronMuon_trigSFup', 'ttH_electronMuon_trigSFdown'] for systematic ttH_electronMuon_trigSF
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttH_electronMuon_trigSFup: reusing w_HasElMuTight__ttH_electronMuon_trigSFup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation ttH_electronMuon_trigSFdown: reusing w_HasElMuTight__ttH_electronMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseidup', 'el_looseiddown'] for systematic el_looseid
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looseidup: reusing w_HasElMuTight__el_looseidup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looseiddown: reusing w_HasElMuTight__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looseeffup', 'el_looseeffdown'] for systematic el_looseeff
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looseeffup: reusing w_HasElMuTight__el_looseeffup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looseeffdown: reusing w_HasElMuTight__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptgt20up', 'el_looserecoptgt20down'] for systematic el_looserecoptgt20
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looserecoptgt20up: reusing w_HasElMuTight__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looserecoptgt20down: reusing w_HasElMuTight__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_looserecoptlt20up', 'el_looserecoptlt20down'] for systematic el_looserecoptlt20
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looserecoptlt20up: reusing w_HasElMuTight__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_looserecoptlt20down: reusing w_HasElMuTight__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_looseup', 'mu_loosedown'] for systematic mu_loose
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation mu_looseup: reusing w_HasElMuTight__mu_looseup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation mu_loosedown: reusing w_HasElMuTight__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding weight variations ['el_tightmvaup', 'el_tightmvadown'] for systematic el_tightmva
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_tightmvaup: reusing w_HasElMuTight__el_tightmvaup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation el_tightmvadown: reusing w_HasElMuTight__el_tightmvadown
DEBUG:bamboo.dataframebackend:Adding weight variations ['mu_tightmvaup', 'mu_tightmvadown'] for systematic mu_tightmva
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation mu_tightmvaup: reusing w_HasElMuTight__mu_tightmvaup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation mu_tightmvadown: reusing w_HasElMuTight__mu_tightmvadown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttbarweightsystup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttbarweightsystup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttbarweightsystdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttbarweightsystdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation pileupup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__pileupup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation pileupdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__pileupdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation jerup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jerup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation jerdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jerdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation jesTotalup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jesTotalup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation jesTotaldown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__jesTotaldown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation btag_ratioup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__btag_ratioup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation btag_ratiodown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__btag_ratiodown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttH_electronMuon_trigSFup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttH_electronMuon_trigSFup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation ttH_electronMuon_trigSFdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__ttH_electronMuon_trigSFdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looseidup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseidup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looseiddown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseiddown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looseeffup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseeffup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looseeffdown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looseeffdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looserecoptgt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptgt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looserecoptgt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptgt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looserecoptlt20up with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptlt20up
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_looserecoptlt20down with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_looserecoptlt20down
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation mu_looseup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_looseup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation mu_loosedown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_loosedown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_tightmvaup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation el_tightmvadown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__el_tightmvadown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation mu_tightmvaup with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_tightmvaup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation mu_tightmvadown with variables v0_Yield_HasElMuPreselected and weight w_HasElMuTight__mu_tightmvadown
DEBUG:bamboo.dataframebackend:Adding cutflow report HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags for selection(s) HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags with variables _zero_for_stats and weight w_HasElElTight
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElTightTwoAk4Jets with variables _zero_for_stats and weight w_HasElElTight
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElTight with variables _zero_for_stats and weight w_HasElElTight
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElFakeablePreMllCutOutZTightVeto with variables _zero_for_stats and weight w_HasElElFakeable
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElFakeablePreMllCutOutZ with variables _zero_for_stats and weight w_HasElElFakeable
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElFakeable with variables _zero_for_stats and weight w_HasElElFakeable
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElPreselected with variables _zero_for_stats and weight w_BtagSF
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_BtagSF with variables _zero_for_stats and weight w_BtagSF
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_withTrig with variables _zero_for_stats and weight w_genWeight
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_genWeight with variables _zero_for_stats and weight w_genWeight
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_hasAtLeast2FakeableLeptons with variables _zero_for_stats and weight w_puWeight
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_passMETFlags with variables _zero_for_stats and weight w_puWeight
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_puWeight with variables _zero_for_stats and weight w_puWeight
DEBUG:bamboo.dataframebackend:Declaring Histo1D helper for types ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>', 'int', 'double')
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_L1PreFiringRate with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_ttbarWeight with variables _zero_for_stats and weight w_ttbarWeight
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_none with variables _zero_for_stats
DEBUG:bamboo.dataframebackend:Declaring Histo1D helper for types ['ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>', 'int']
DEBUG:bamboo.dataframebackend:Defined cutflow HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags reports for selections HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags, HasElElTightTwoAk4Jets, HasElElTight, HasElElFakeablePreMllCutOutZTightVeto, HasElElFakeablePreMllCutOutZ, HasElElFakeable, HasElElPreselected, BtagSF, withTrig, genWeight, hasAtLeast2FakeableLeptons, passMETFlags, puWeight, L1PreFiringRate, ttbarWeight, none
DEBUG:bamboo.dataframebackend:Adding cutflow report HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags for selection(s) HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags with variables _zero_for_stats and weight w_HasMuMuTight
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuTightTwoAk4Jets with variables _zero_for_stats and weight w_HasMuMuTight
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuTight with variables _zero_for_stats and weight w_HasMuMuTight
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuFakeablePreMllCutOutZTightVeto with variables _zero_for_stats and weight w_HasMuMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuFakeablePreMllCutOutZ with variables _zero_for_stats and weight w_HasMuMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuFakeable with variables _zero_for_stats and weight w_HasMuMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuPreselected with variables _zero_for_stats and weight w_BtagSF
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_BtagSF with variables _zero_for_stats and weight w_BtagSF
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_withTrig with variables _zero_for_stats and weight w_genWeight
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_genWeight with variables _zero_for_stats and weight w_genWeight
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_hasAtLeast2FakeableLeptons with variables _zero_for_stats and weight w_puWeight
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_passMETFlags with variables _zero_for_stats and weight w_puWeight
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_puWeight with variables _zero_for_stats and weight w_puWeight
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_L1PreFiringRate with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_ttbarWeight with variables _zero_for_stats and weight w_ttbarWeight
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_none with variables _zero_for_stats
DEBUG:bamboo.dataframebackend:Defined cutflow HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags reports for selections HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags, HasMuMuTightTwoAk4Jets, HasMuMuTight, HasMuMuFakeablePreMllCutOutZTightVeto, HasMuMuFakeablePreMllCutOutZ, HasMuMuFakeable, HasMuMuPreselected, BtagSF, withTrig, genWeight, hasAtLeast2FakeableLeptons, passMETFlags, puWeight, L1PreFiringRate, ttbarWeight, none
DEBUG:bamboo.dataframebackend:Adding cutflow report HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags for selection(s) HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags with variables _zero_for_stats and weight w_HasElMuTight
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuTightTwoAk4Jets with variables _zero_for_stats and weight w_HasElMuTight
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuTight with variables _zero_for_stats and weight w_HasElMuTight
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuFakeablePreMllCutOutZTightVeto with variables _zero_for_stats and weight w_HasElMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuFakeablePreMllCutOutZ with variables _zero_for_stats and weight w_HasElMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuFakeable with variables _zero_for_stats and weight w_HasElMuFakeable
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuPreselected with variables _zero_for_stats and weight w_BtagSF
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_BtagSF with variables _zero_for_stats and weight w_BtagSF
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_withTrig with variables _zero_for_stats and weight w_genWeight
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_genWeight with variables _zero_for_stats and weight w_genWeight
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_hasAtLeast2FakeableLeptons with variables _zero_for_stats and weight w_puWeight
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_passMETFlags with variables _zero_for_stats and weight w_puWeight
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_puWeight with variables _zero_for_stats and weight w_puWeight
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_L1PreFiringRate with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_ttbarWeight with variables _zero_for_stats and weight w_ttbarWeight
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_none with variables _zero_for_stats
DEBUG:bamboo.dataframebackend:Defined cutflow HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags reports for selections HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags, HasElMuTightTwoAk4Jets, HasElMuTight, HasElMuFakeablePreMllCutOutZTightVeto, HasElMuFakeablePreMllCutOutZ, HasElMuFakeable, HasElMuPreselected, BtagSF, withTrig, genWeight, hasAtLeast2FakeableLeptons, passMETFlags, puWeight, L1PreFiringRate, ttbarWeight, none
INFO:bamboo.analysismodules:24 plots defined in 94.08s, max RSS: 968.68MB
INFO:bamboo.analysismodules:Number of uses per node type: defaultdict(<class 'int'>, {'gInterpreter_Declare': 57, 'Define': 323, 'Filter': 48, 'Histo1D': 501})
INFO:bamboo.analysismodules:HistoND calls per column type: defaultdict(<class 'int'>, {('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', ('int',), 'double'): 486, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', ('int',), 'float'): 3, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>', ('int',), 'double'): 9, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>', ('int',)): 3})
DEBUG:bamboo.analysismodules:HistoND helper instantiations: {('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', ('int',), 'double'): <ROOT.MethodProxy object at 0x7fba10523ad0>, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', ('int',), 'float'): <ROOT.MethodProxy object at 0x7fba09e08cd0>, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>', ('int',), 'double'): <ROOT.MethodProxy object at 0x7fba10467690>, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>', ('int',)): <ROOT.TemplateProxy object at 0x7fba1042e290>}
INFO:bamboo.analysismodules:Systematic shape variations impacting any plots: ttbarweightsyst, L1PreFiring, pileup, jer, jesTotal, btag_ratio, ttH_doubleElectron_trigSF, el_looseid, el_looseeff, el_looserecoptgt20, el_looserecoptlt20, ttH_doubleMuon_trigSF, mu_loose, ttH_electronMuon_trigSF, el_tightmva, mu_tightmva
INFO:bamboo.analysismodules:Starting to fill plots
INFO:bamboo.analysismodules:Plots finished in 464.27s, max RSS: 1931.10MB (501 histograms)
INFO:bamboo.analysismodules:Sequential mode: calling processTrees for PlotterHHtobbWW.py:PlotterNanoHHtobbWW with (['/storage/data/cms/store/data/Run2016B_ver2/DoubleMuon/NANOAOD/Nano1June2019_ver2-v1/70000/49777B6C-849A-5644-9B61-00C5697F6BD2.root'], test_Plotter/results/DoubleMuon_2016B.root, tree=Events, certifiedLumiFile=/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/test_Plotter/Cert_271036-284044_13TeV_23Sep2016ReReco_Collisions16_JSON.txt, runRange=272007,275376, sample=DoubleMuon_2016B
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: JetVariationsCalculator bamboo_jetVarCalcDoubleMuon2016B{}; // for DoubleMuon_2016B
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com:443
DEBUG:urllib3.connectionpool:https://api.github.com:443 "GET /repos/cms-jet/JECDatabase/git/refs/heads HTTP/1.1" 304 0
DEBUG:bamboo.jetdatabasecache:cms-jet/JECDatabase tree up to date at 372f4abaa71581e32919611ced7c402840fc1d2e
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: Type1METVariationsCalculator bamboo_Type1METVarCalcDoubleMuon2016B{}; // for DoubleMuon_2016B
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.github.com:443
DEBUG:urllib3.connectionpool:https://api.github.com:443 "GET /repos/cms-jet/JECDatabase/git/refs/heads HTTP/1.1" 304 0
DEBUG:bamboo.jetdatabasecache:cms-jet/JECDatabase tree up to date at 372f4abaa71581e32919611ced7c402840fc1d2e
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: const auto myFun52 = LumiMask::fromJSON("/home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/test_Plotter/Cert_271036-284044_13TeV_23Sep2016ReReco_Collisions16_JSON.txt", 272007, 275376);
DEBUG:bamboo.dataframebackend:Filtering with myFun52.accept(run, luminosityBlock)
INFO:bamboo.analysismodules:Starting to define plots
DEBUG:bamboo.dataframebackend:Defining myCol1 as bamboo_jetVarCalcDoubleMuon2016B.produce(Jet_pt, Jet_eta, Jet_phi, Jet_mass, Jet_rawFactor, Jet_area, fixedGridRhoFastjetAll, 0, ROOT::VecOps::RVec<float>{}, ROOT::VecOps::RVec<float>{}, ROOT::VecOps::RVec<float>{}, ROOT::VecOps::RVec<float>{})
DEBUG:bamboo.dataframebackend:Defining myCol2 as bamboo_Type1METVarCalcDoubleMuon2016B.produce(Jet_pt, Jet_eta, Jet_phi, Jet_mass, Jet_rawFactor, Jet_area, Jet_muonSubtrFactor, Jet_neEmEF, Jet_chEmEF, fixedGridRhoFastjetAll, 0, ROOT::VecOps::RVec<float>{}, ROOT::VecOps::RVec<float>{}, ROOT::VecOps::RVec<float>{}, ROOT::VecOps::RVec<float>{}, RawMET_pt, RawMET_pt, MET_MetUnclustEnUpDeltaX, MET_MetUnclustEnUpDeltaY, CorrT1METJet_rawPt, CorrT1METJet_eta, CorrT1METJet_phi, CorrT1METJet_area, CorrT1METJet_muonSubtrFactor, ROOT::VecOps::RVec<float>{}, ROOT::VecOps::RVec<float>{})
DEBUG:bamboo.dataframebackend:Defining w_L1PreFiringRate as L1PreFiringWeight_Nom
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:L1PreFiringRate systematic variation L1PreFiringup: defining new weight based on None
DEBUG:bamboo.dataframebackend:Defining w_L1PreFiringRate__L1PreFiringup as L1PreFiringWeight_Up
DEBUG:bamboo.dataframebackend:L1PreFiringRate systematic variation L1PreFiringdown: defining new weight based on None
DEBUG:bamboo.dataframebackend:Defining w_L1PreFiringRate__L1PreFiringdown as L1PreFiringWeight_Dn
DEBUG:bamboo.dataframebackend:Filtering with ( Flag_goodVertices && Flag_globalSuperTightHalo2016Filter && Flag_HBHENoiseFilter && Flag_HBHENoiseIsoFilter && Flag_EcalDeadCellTriggerPrimitiveFilter && Flag_BadPFMuonFilter && Flag_eeBadScFilter )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:passMETFlags systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:passMETFlags systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol7 as myFun3(Electron_jetRelIso, Electron_mvaTTH, Electron_pt, Electron_pdgId, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol6 as myFun4(myCol7, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol5 as myFun5(Electron_mvaFall17V2noIso_WPL, Electron_dxy, Electron_dz, Electron_eta, Electron_mass, Electron_miniPFRelIso_all, Electron_phi, Electron_pt, Electron_sip3d, Electron_lostHits, myCol6, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol10 as myFun6(Muon_mediumId, Muon_jetRelIso, Muon_mvaTTH, Muon_pt, Muon_pdgId, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol9 as myFun4(myCol10, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol8 as myFun7(Muon_looseId, Muon_dxy, Muon_dz, Muon_eta, Muon_mass, Muon_miniPFRelIso_all, Muon_phi, Muon_pt, Muon_sip3d, myCol9, nMuon)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun53(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<std::size_t>& myArg4, const ROOT::VecOps::RVec<std::size_t>& myArg5, const UInt_t& myArg6, const UInt_t& myArg7)
{
  return rdfhelpers::select(myArg4,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7] ( std::size_t i2 ) { return ( ! ( -1 != rdfhelpers::next(myArg5,
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg5, &myArg6, &myArg7, i2] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg0[i2] - myArg2[i0] ), ( myArg1[i2] - myArg3[i0] )) ) <= 0.3 ); }, -1) ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol4 as myFun53(Electron_eta, Electron_phi, Muon_eta, Muon_phi, myCol5, myCol8, nElectron, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol3 as myFun9(Electron_convVeto, Electron_mvaFall17V2noIso_WP80, Electron_deltaEtaSC, Electron_eInvMinusPInv, Electron_eta, Electron_hoe, Electron_jetRelIso, Electron_mvaTTH, Electron_sieie, Jet_btagDeepFlavB, myCol7, Electron_jetIdx, Electron_lostHits, myCol4, nElectron, nJet)
DEBUG:bamboo.dataframebackend:Defining myCol11 as myFun10(Jet_btagDeepFlavB, Muon_jetRelIso, Muon_mvaTTH, Muon_pt, myCol10, Muon_jetIdx, myCol8, nJet, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol3.size() + myCol11.size() ) >= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:hasAtLeast2FakeableLeptons systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:hasAtLeast2FakeableLeptons systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Filtering with ( ( ( ! ( ( HLT_IsoMu22 || HLT_IsoTkMu22 || HLT_IsoMu22_eta2p1 || HLT_IsoTkMu22_eta2p1 || HLT_IsoMu24 || HLT_IsoTkMu24 ) || ( HLT_Ele27_WPTight_Gsf || HLT_Ele25_eta2p1_WPTight_Gsf || HLT_Ele27_eta2p1_WPLoose_Gsf ) ) ) && ( HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL || HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ || HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL || HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ ) ) && ( ( ( ( ( ( ( myCol11.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myCol3.size() ) ) : ( ( ( ( myCol3.size() == 0 ) ) ? ( static_cast<std::size_t>(0) ) : ( ( ( ( ( myCol3.size() == 1 ) && ( myCol11.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myCol3.size() >= 2 ) && ( myCol11.size() == 1 ) ) ) ? ( ( ( ( ( myCol7[myCol3[0]] >  myCol10[myCol11[0]] ) && ( myCol7[myCol3[1]] >  myCol10[myCol11[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myCol3.size() == 1 ) && ( myCol11.size() >= 2 ) ) ) ? ( ( ( ( ( myCol7[myCol3[0]] >  myCol10[myCol11[0]] ) || ( myCol7[myCol3[0]] >  myCol10[myCol11[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) : ( ( ( ( myCol7[myCol3[0]] >  myCol10[myCol11[0]] ) ) ? ( ( ( ( myCol7[myCol3[1]] >  myCol10[myCol11[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myCol7[myCol3[0]] >  myCol10[myCol11[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - 0 ) >= 2 ) ) ? ( ( HLT_Ele27_WPTight_Gsf || HLT_Ele25_eta2p1_WPTight_Gsf || HLT_Ele27_eta2p1_WPLoose_Gsf || HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ ) ) : ( ( ( ( ( ( ( ( ( myCol11.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myCol3.size() ) ) : ( ( ( ( myCol3.size() == 0 ) ) ? ( static_cast<std::size_t>(0) ) : ( ( ( ( ( myCol3.size() == 1 ) && ( myCol11.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myCol3.size() >= 2 ) && ( myCol11.size() == 1 ) ) ) ? ( ( ( ( ( myCol7[myCol3[0]] >  myCol10[myCol11[0]] ) && ( myCol7[myCol3[1]] >  myCol10[myCol11[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myCol3.size() == 1 ) && ( myCol11.size() >= 2 ) ) ) ? ( ( ( ( ( myCol7[myCol3[0]] >  myCol10[myCol11[0]] ) || ( myCol7[myCol3[0]] >  myCol10[myCol11[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) : ( ( ( ( myCol7[myCol3[0]] >  myCol10[myCol11[0]] ) ) ? ( ( ( ( myCol7[myCol3[1]] >  myCol10[myCol11[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myCol7[myCol3[0]] >  myCol10[myCol11[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - 0 ) >= 1 ) && ( ( ( ( ( myCol3.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myCol11.size() ) ) : ( ( ( ( myCol11.size() == 0 ) ) ? ( static_cast<std::size_t>(0) ) : ( ( ( ( ( myCol11.size() == 1 ) && ( myCol3.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myCol11.size() >= 2 ) && ( myCol3.size() == 1 ) ) ) ? ( ( ( ( ( myCol10[myCol11[0]] >  myCol7[myCol3[0]] ) && ( myCol10[myCol11[1]] >  myCol7[myCol3[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myCol11.size() == 1 ) && ( myCol3.size() >= 2 ) ) ) ? ( ( ( ( ( myCol10[myCol11[0]] >  myCol7[myCol3[0]] ) || ( myCol10[myCol11[0]] >  myCol7[myCol3[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) : ( ( ( ( myCol10[myCol11[0]] >  myCol7[myCol3[0]] ) ) ? ( ( ( ( myCol10[myCol11[1]] >  myCol7[myCol3[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myCol10[myCol11[0]] >  myCol7[myCol3[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - 0 ) >= 1 ) ) ) ? ( ( HLT_IsoMu22 || HLT_IsoTkMu22 || HLT_IsoMu22_eta2p1 || HLT_IsoTkMu22_eta2p1 || HLT_IsoMu24 || HLT_IsoTkMu24 || HLT_Ele27_WPTight_Gsf || HLT_Ele25_eta2p1_WPTight_Gsf || HLT_Ele27_eta2p1_WPLoose_Gsf || HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL || HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL ) ) : ( ( ( ( ( ( ( ( myCol3.size() == 0 ) ) ? ( std::min( static_cast<std::size_t>(2), myCol11.size() ) ) : ( ( ( ( myCol11.size() == 0 ) ) ? ( static_cast<std::size_t>(0) ) : ( ( ( ( ( myCol11.size() == 1 ) && ( myCol3.size() == 1 ) ) ) ? ( static_cast<std::size_t>(1) ) : ( ( ( ( ( myCol11.size() >= 2 ) && ( myCol3.size() == 1 ) ) ) ? ( ( ( ( ( myCol10[myCol11[0]] >  myCol7[myCol3[0]] ) && ( myCol10[myCol11[1]] >  myCol7[myCol3[0]] ) ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( ( myCol11.size() == 1 ) && ( myCol3.size() >= 2 ) ) ) ? ( ( ( ( ( myCol10[myCol11[0]] >  myCol7[myCol3[0]] ) || ( myCol10[myCol11[0]] >  myCol7[myCol3[1]] ) ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) : ( ( ( ( myCol10[myCol11[0]] >  myCol7[myCol3[0]] ) ) ? ( ( ( ( myCol10[myCol11[1]] >  myCol7[myCol3[0]] ) ) ? ( static_cast<std::size_t>(2) ) : ( static_cast<std::size_t>(1) ) ) ) : ( ( ( ( myCol10[myCol11[0]] >  myCol7[myCol3[1]] ) ) ? ( static_cast<std::size_t>(1) ) : ( static_cast<std::size_t>(0) ) ) ) ) ) ) ) ) ) ) ) ) ) ) - 0 ) >= 2 ) ) ? ( ( HLT_IsoMu22 || HLT_IsoTkMu22 || HLT_IsoMu22_eta2p1 || HLT_IsoTkMu22_eta2p1 || HLT_IsoMu24 || HLT_IsoTkMu24 || HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL || HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ || HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL || HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ ) ) : ( false ) ) ) ) ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:withTrig systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:withTrig systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol12 as myFun23(myCol5)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol12.size() >= 1 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElPreselected systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol13 as myFun23(myCol8)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol13.size() >= 1 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuPreselected systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<rdfhelpers::Combination<2>> myFun54(const ROOT::VecOps::RVec<std::size_t>& myArg0, const ROOT::VecOps::RVec<std::size_t>& myArg1)
{
  return rdfhelpers::combine(
     [&myArg0, &myArg1] ( std::size_t i0, std::size_t i1 ) { return true; },
     myArg0, myArg1);
};

DEBUG:bamboo.dataframebackend:Defining myCol14 as myFun54(myCol5, myCol8)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol14.size() >= 1 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuPreselected systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining v0_Yield_HasElElPreselected as 0
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElPreselected variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining v0_Yield_HasMuMuPreselected as 0
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuPreselected variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining v0_Yield_HasElMuPreselected as 0
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuPreselected variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol15 as myFun25(v0_Yield_HasElElPreselected, myCol10, myCol7, myCol11, myCol3)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol15.size() >= 1 ) && ( Electron_charge[myCol3[myCol15[0].get(0)]] != Electron_charge[myCol3[myCol15[0].get(1)]] ) && ( ( myCol7[myCol3[myCol15[0].get(0)]] >  15 ) && ( myCol7[myCol3[myCol15[0].get(1)]] >  15 ) ) && ( ( myCol7[myCol3[myCol15[0].get(0)]] >  25 ) || ( myCol7[myCol3[myCol15[0].get(1)]] >  25 ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElFakeable systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol16 as myFun30(v0_Yield_HasMuMuPreselected, myCol10, myCol7, myCol11, myCol3)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol16.size() >= 1 ) && ( Muon_charge[myCol11[myCol16[0].get(0)]] != Muon_charge[myCol11[myCol16[0].get(1)]] ) && ( ( myCol10[myCol11[myCol16[0].get(0)]] >  15 ) && ( myCol10[myCol11[myCol16[0].get(1)]] >  15 ) ) && ( ( myCol10[myCol11[myCol16[0].get(0)]] >  25 ) || ( myCol10[myCol11[myCol16[0].get(1)]] >  25 ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuFakeable systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol17 as myFun32(v0_Yield_HasElMuPreselected, myCol10, myCol7, myCol11, myCol3)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol17.size() >= 1 ) && ( Electron_charge[myCol3[myCol17[0].get(0)]] != Muon_charge[myCol11[myCol17[0].get(1)]] ) && ( ( myCol7[myCol3[myCol17[0].get(0)]] >  15 ) && ( myCol10[myCol11[myCol17[0].get(1)]] >  15 ) ) && ( ( myCol7[myCol3[myCol17[0].get(0)]] >  25 ) || ( myCol10[myCol11[myCol17[0].get(1)]] >  25 ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuFakeable systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeable variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeable variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeable variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol18 as myFun33(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol12, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol20 as myFun23(myCol8)
DEBUG:bamboo.dataframebackend:Defining myCol19 as myFun33(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol20, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol22 as myFun54(myCol5, myCol8)
DEBUG:bamboo.dataframebackend:Defining myCol21 as myFun34(Electron_eta, Electron_mass, Electron_phi, Electron_pt, Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol22, nElectron, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol24 as myFun35(Electron_charge, myCol4, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol23 as myFun36(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol24, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol26 as myFun35(Muon_charge, myCol8, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol25 as myFun37(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol26, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( ( ! ( -1 != myCol18 ) ) && ( ! ( -1 != myCol19 ) ) && ( ! ( -1 != myCol21 ) ) && ( ! ( -1 != myCol23 ) ) && ( ! ( -1 != myCol25 ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZ systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol27 as myFun33(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol12, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol28 as myFun33(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol13, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol30 as myFun54(myCol5, myCol8)
DEBUG:bamboo.dataframebackend:Defining myCol29 as myFun34(Electron_eta, Electron_mass, Electron_phi, Electron_pt, Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol30, nElectron, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol32 as myFun35(Electron_charge, myCol4, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol31 as myFun36(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol32, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol34 as myFun35(Muon_charge, myCol8, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol33 as myFun37(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol34, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( ( ! ( -1 != myCol27 ) ) && ( ! ( -1 != myCol28 ) ) && ( ! ( -1 != myCol29 ) ) && ( ! ( -1 != myCol31 ) ) && ( ! ( -1 != myCol33 ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZ systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol35 as myFun33(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol12, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol36 as myFun33(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol13, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol37 as myFun34(Electron_eta, Electron_mass, Electron_phi, Electron_pt, Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol14, nElectron, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol39 as myFun35(Electron_charge, myCol4, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol38 as myFun36(Electron_eta, Electron_mass, Electron_phi, Electron_pt, myCol39, nElectron)
DEBUG:bamboo.dataframebackend:Defining myCol41 as myFun35(Muon_charge, myCol8, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol40 as myFun37(Muon_eta, Muon_mass, Muon_phi, Muon_pt, myCol41, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( ( ! ( -1 != myCol35 ) ) && ( ! ( -1 != myCol36 ) ) && ( ! ( -1 != myCol37 ) ) && ( ! ( -1 != myCol38 ) ) && ( ! ( -1 != myCol40 ) ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZ systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZ variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZ variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZ variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol42 as myFun38(Muon_mediumId, Muon_mvaTTH, myCol11, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol43 as myFun39(Electron_mvaTTH, myCol3, nElectron)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol42.size() + myCol43.size() ) <= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol44 as myFun38(Muon_mediumId, Muon_mvaTTH, myCol11, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol45 as myFun39(Electron_mvaTTH, myCol3, nElectron)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol44.size() + myCol45.size() ) <= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol46 as myFun38(Muon_mediumId, Muon_mvaTTH, myCol11, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol47 as myFun39(Electron_mvaTTH, myCol3, nElectron)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol46.size() + myCol47.size() ) <= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuFakeablePreMllCutOutZTightVeto systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElFakeablePreMllCutOutZTightVeto variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuFakeablePreMllCutOutZTightVeto variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuFakeablePreMllCutOutZTightVeto variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun55(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<rdfhelpers::Combination<2>>& myArg1, const ROOT::VecOps::RVec<std::size_t>& myArg2, const UInt_t& myArg3)
{
  return rdfhelpers::select(rdfhelpers::IndexRange<std::size_t>{myArg1.size()},
    [&myArg0, &myArg1, &myArg2, &myArg3] ( std::size_t i5 ) { return ( ( true && true ) && ( myArg0[myArg2[myArg1[i5].get(0)]] >= 0.8 ) && ( myArg0[myArg2[myArg1[i5].get(1)]] >= 0.8 ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol48 as myFun55(Electron_mvaTTH, myCol15, myCol3, nElectron)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol48.size() >= 1 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElTight systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun56(const ROOT::VecOps::RVec<Bool_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<rdfhelpers::Combination<2>>& myArg2, const ROOT::VecOps::RVec<std::size_t>& myArg3, const UInt_t& myArg4)
{
  return rdfhelpers::select(rdfhelpers::IndexRange<std::size_t>{myArg2.size()},
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4] ( std::size_t i4 ) { return ( ( true && true ) && ( ( myArg1[myArg3[myArg2[i4].get(0)]] >= 0.85 ) && myArg0[myArg3[myArg2[i4].get(0)]] ) && ( ( myArg1[myArg3[myArg2[i4].get(1)]] >= 0.85 ) && myArg0[myArg3[myArg2[i4].get(1)]] ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol49 as myFun56(Muon_mediumId, Muon_mvaTTH, myCol16, myCol11, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol49.size() >= 1 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuTight systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun57(const ROOT::VecOps::RVec<Bool_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<rdfhelpers::Combination<2>>& myArg3, const ROOT::VecOps::RVec<std::size_t>& myArg4, const ROOT::VecOps::RVec<std::size_t>& myArg5, const UInt_t& myArg6, const UInt_t& myArg7)
{
  return rdfhelpers::select(rdfhelpers::IndexRange<std::size_t>{myArg3.size()},
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7] ( std::size_t i3 ) { return ( ( true && true ) && ( myArg1[myArg5[myArg3[i3].get(0)]] >= 0.8 ) && ( ( myArg2[myArg4[myArg3[i3].get(1)]] >= 0.85 ) && myArg0[myArg4[myArg3[i3].get(1)]] ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol50 as myFun57(Muon_mediumId, Electron_mvaTTH, Muon_mvaTTH, myCol17, myCol11, myCol3, nElectron, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol50.size() >= 1 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuTight systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTight variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTight variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTight variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol53 as myFun11(nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining myCol52 as myFun12(Jet_eta, Jet_phi, Jet_jetId, myCol53, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining new symbol with interpreter: ROOT::VecOps::RVec<std::size_t> myFun58(const ROOT::VecOps::RVec<Float_t>& myArg0, const ROOT::VecOps::RVec<Float_t>& myArg1, const ROOT::VecOps::RVec<Float_t>& myArg2, const ROOT::VecOps::RVec<Float_t>& myArg3, const ROOT::VecOps::RVec<Float_t>& myArg4, const ROOT::VecOps::RVec<Float_t>& myArg5, const ROOT::VecOps::RVec<std::size_t>& myArg6, const ROOT::VecOps::RVec<std::size_t>& myArg7, const ROOT::VecOps::RVec<std::size_t>& myArg8, const UInt_t& myArg9, const UInt_t& myArg10, const UInt_t& myArg11)
{
  return rdfhelpers::select(myArg8,
    [&myArg0, &myArg1, &myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg7, &myArg8, &myArg9, &myArg10, &myArg11] ( std::size_t i3 ) { return ( ( ! ( -1 != rdfhelpers::next(myArg7,
     [&myArg0, &myArg1, &myArg2, &myArg3, &myArg7, &myArg9, &myArg10, i3] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg0[i0] - myArg2[i3] ), ( myArg1[i0] - myArg3[i3] )) ) <= 0.4 ); }, -1) ) ) && ( ! ( -1 != rdfhelpers::next(myArg6,
     [&myArg2, &myArg3, &myArg4, &myArg5, &myArg6, &myArg10, &myArg11, i3] ( std::size_t i0 ) { return ( std::sqrt( rdfhelpers::deltaR2(( myArg4[i0] - myArg2[i3] ), ( myArg5[i0] - myArg3[i3] )) ) <= 0.4 ); }, -1) ) ) ); });
};

DEBUG:bamboo.dataframebackend:Defining myCol51 as myFun58(Electron_eta, Electron_phi, Jet_eta, Jet_phi, Muon_eta, Muon_phi, myCol11, myCol3, myCol52, nElectron, nJet, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol51.size() >= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4Jets systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4Jets variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol56 as myFun11(nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining myCol55 as myFun12(Jet_eta, Jet_phi, Jet_jetId, myCol56, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining myCol54 as myFun58(Electron_eta, Electron_phi, Jet_eta, Jet_phi, Muon_eta, Muon_phi, myCol11, myCol3, myCol55, nElectron, nJet, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol54.size() >= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4Jets systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4Jets variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol59 as myFun11(nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining myCol58 as myFun12(Jet_eta, Jet_phi, Jet_jetId, myCol59, nJet, myCol1)
DEBUG:bamboo.dataframebackend:Defining myCol57 as myFun58(Electron_eta, Electron_phi, Jet_eta, Jet_phi, Muon_eta, Muon_phi, myCol11, myCol3, myCol58, nElectron, nJet, nMuon)
DEBUG:bamboo.dataframebackend:Filtering with ( myCol57.size() >= 2 )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4Jets systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4Jets variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol60 as myFun45(Jet_btagDeepFlavB, myCol51, nJet)
DEBUG:bamboo.dataframebackend:Defining myCol64 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol63 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol64, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol62 as myFun48(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol11, myCol3, myCol63, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol61 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol62, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol60.size() >= 2 ) && ( myCol61.size() == 0 ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringup with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringdown with variables v0_Yield_HasElElPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol65 as myFun45(Jet_btagDeepFlavB, myCol54, nJet)
DEBUG:bamboo.dataframebackend:Defining myCol69 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol68 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol69, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol67 as myFun48(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol11, myCol3, myCol68, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol66 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol67, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol65.size() >= 2 ) && ( myCol66.size() == 0 ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringup with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringdown with variables v0_Yield_HasMuMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Defining myCol70 as myFun45(Jet_btagDeepFlavB, myCol57, nJet)
DEBUG:bamboo.dataframebackend:Defining myCol74 as myFun46(FatJet_pt, nFatJet)
DEBUG:bamboo.dataframebackend:Defining myCol73 as myFun47(FatJet_eta, FatJet_mass, FatJet_msoftdrop, FatJet_phi, FatJet_pt, FatJet_tau1, FatJet_tau2, SubJet_eta, SubJet_pt, FatJet_jetId, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol74, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Defining myCol72 as myFun48(Electron_eta, Electron_phi, FatJet_eta, FatJet_phi, Muon_eta, Muon_phi, myCol11, myCol3, myCol73, nElectron, nFatJet, nMuon)
DEBUG:bamboo.dataframebackend:Defining myCol71 as myFun49(SubJet_btagDeepB, SubJet_pt, FatJet_subJetIdx1, FatJet_subJetIdx2, myCol72, nFatJet, nSubJet)
DEBUG:bamboo.dataframebackend:Filtering with ( ( myCol70.size() >= 2 ) && ( myCol71.size() == 0 ) )
DEBUG:bamboo.dataframebackend:Adding weight variations ['L1PreFiringup', 'L1PreFiringdown'] for systematic L1PreFiring
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringup: reusing w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags systematic variation L1PreFiringdown: reusing w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringup with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringup
DEBUG:bamboo.dataframebackend:Adding plot Yield_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags variation L1PreFiringdown with variables v0_Yield_HasElMuPreselected and weight w_L1PreFiringRate__L1PreFiringdown
DEBUG:bamboo.dataframebackend:Adding cutflow report HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags for selection(s) HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElTightTwoAk4Jets with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElTight with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElFakeablePreMllCutOutZTightVeto with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElFakeablePreMllCutOutZ with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElFakeable with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElElPreselected with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_withTrig with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_hasAtLeast2FakeableLeptons with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_passMETFlags with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_L1PreFiringRate with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_goodlumis with variables _zero_for_stats
DEBUG:bamboo.dataframebackend:Declaring Histo1D helper for types ['ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', 'int']
DEBUG:bamboo.dataframebackend:Adding plot HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_none with variables _zero_for_stats
DEBUG:bamboo.dataframebackend:Defined cutflow HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags reports for selections HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags, HasElElTightTwoAk4Jets, HasElElTight, HasElElFakeablePreMllCutOutZTightVeto, HasElElFakeablePreMllCutOutZ, HasElElFakeable, HasElElPreselected, withTrig, hasAtLeast2FakeableLeptons, passMETFlags, L1PreFiringRate, goodlumis, none
DEBUG:bamboo.dataframebackend:Adding cutflow report HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags for selection(s) HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuTightTwoAk4Jets with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuTight with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuFakeablePreMllCutOutZTightVeto with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuFakeablePreMllCutOutZ with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuFakeable with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasMuMuPreselected with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_withTrig with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_hasAtLeast2FakeableLeptons with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_passMETFlags with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_L1PreFiringRate with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_goodlumis with variables _zero_for_stats
DEBUG:bamboo.dataframebackend:Adding plot HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_none with variables _zero_for_stats
DEBUG:bamboo.dataframebackend:Defined cutflow HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags reports for selections HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags, HasMuMuTightTwoAk4Jets, HasMuMuTight, HasMuMuFakeablePreMllCutOutZTightVeto, HasMuMuFakeablePreMllCutOutZ, HasMuMuFakeable, HasMuMuPreselected, withTrig, hasAtLeast2FakeableLeptons, passMETFlags, L1PreFiringRate, goodlumis, none
DEBUG:bamboo.dataframebackend:Adding cutflow report HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags for selection(s) HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuTightTwoAk4Jets with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuTight with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuFakeablePreMllCutOutZTightVeto with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuFakeablePreMllCutOutZ with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuFakeable with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_HasElMuPreselected with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_withTrig with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_hasAtLeast2FakeableLeptons with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_passMETFlags with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_L1PreFiringRate with variables _zero_for_stats and weight w_L1PreFiringRate
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_goodlumis with variables _zero_for_stats
DEBUG:bamboo.dataframebackend:Adding plot HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_none with variables _zero_for_stats
DEBUG:bamboo.dataframebackend:Defined cutflow HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags reports for selections HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags, HasElMuTightTwoAk4Jets, HasElMuTight, HasElMuFakeablePreMllCutOutZTightVeto, HasElMuFakeablePreMllCutOutZ, HasElMuFakeable, HasElMuPreselected, withTrig, hasAtLeast2FakeableLeptons, passMETFlags, L1PreFiringRate, goodlumis, none
INFO:bamboo.analysismodules:24 plots defined in 5.23s, max RSS: 1931.10MB
INFO:bamboo.analysismodules:Number of uses per node type: defaultdict(<class 'int'>, {'gInterpreter_Declare': 66, 'Define': 403, 'Filter': 73, 'Histo1D': 603})
INFO:bamboo.analysismodules:HistoND calls per column type: defaultdict(<class 'int'>, {('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', ('int',), 'double'): 486, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', ('int',), 'float'): 99, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>', ('int',), 'double'): 9, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>', ('int',)): 6, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', ('int',)): 3})
DEBUG:bamboo.analysismodules:HistoND helper instantiations: {('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', ('int',), 'double'): <ROOT.MethodProxy object at 0x7fba10523ad0>, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', ('int',), 'float'): <ROOT.MethodProxy object at 0x7fba09e08cd0>, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>', ('int',), 'double'): <ROOT.MethodProxy object at 0x7fba10467690>, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>', ('int',)): <ROOT.TemplateProxy object at 0x7fba1042e290>, ('ROOT::RDF::RInterface<ROOT::Detail::RDF::RJittedFilter,void>', ('int',)): <ROOT.TemplateProxy object at 0x7fba0a25c110>}
INFO:bamboo.analysismodules:Systematic shape variations impacting any plots: L1PreFiring
INFO:bamboo.analysismodules:Starting to fill plots
INFO:bamboo.analysismodules:Plots finished in 483.92s, max RSS: 2000.73MB (102 histograms)
INFO:bamboo.analysisutils:Cutflow report HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags for sample TTTo2L2Nu
INFO:bamboo.analysisutils:Sum of event weights for processed files: 4.920320e+07
WARNING:bamboo.plots:Could not find object HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags_goodlumis
INFO:bamboo.analysisutils:Selection none: N=682600.0, SumW=682600.0
INFO:bamboo.analysisutils:Selection L1PreFiringRate: N=682600.0, SumW=670897.351697749, Eff=98.29%, TotalEff=1.36%
INFO:bamboo.analysisutils:Selection passMETFlags: N=681817.0, SumW=669770.5956011419, Eff=99.83%, TotalEff=1.36%
INFO:bamboo.analysisutils:Selection hasAtLeast2FakeableLeptons: N=162182.0, SumW=162767.4880866174, Eff=24.30%, TotalEff=0.33%
INFO:bamboo.analysisutils:Selection withTrig: N=156589.0, SumW=11343815.937383113, Eff=6969.34%, TotalEff=23.06%
INFO:bamboo.analysisutils:Selection HasElElPreselected: N=26954.0, SumW=1974957.820748301, Eff=17.41%, TotalEff=4.01%
INFO:bamboo.analysisutils:Selection HasElElFakeable: N=23336.0, SumW=1620999.0740099817, Eff=82.08%, TotalEff=3.29%
INFO:bamboo.analysisutils:Selection HasElElFakeablePreMllCutOutZ: N=19946.0, SumW=1383014.8944551363, Eff=85.32%, TotalEff=2.81%
INFO:bamboo.analysisutils:Selection HasElElFakeablePreMllCutOutZTightVeto: N=19941.0, SumW=1382658.086808196, Eff=99.97%, TotalEff=2.81%
INFO:bamboo.analysisutils:Selection HasElElTight: N=12182.0, SumW=617087.1591688904, Eff=44.63%, TotalEff=1.25%
INFO:bamboo.analysisutils:Selection HasElElTightTwoAk4Jets: N=10065.0, SumW=508812.2420181694, Eff=82.45%, TotalEff=1.03%
INFO:bamboo.analysisutils:Selection HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags: N=4502.0, SumW=204299.27759053835, Eff=40.15%, TotalEff=0.42%
INFO:bamboo.analysisutils:Cutflow report HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags for sample DoubleMuon_2016B
INFO:bamboo.analysisutils:Selection none: N=1426646.0, SumW=1426646.0
INFO:bamboo.analysisutils:Selection goodlumis: N=1171499.0, SumW=1171499.0, Eff=82.12%
INFO:bamboo.analysisutils:Selection L1PreFiringRate: N=1171499.0, SumW=1165312.9641152024, Eff=99.47%
INFO:bamboo.analysisutils:Selection passMETFlags: N=1168923.0, SumW=1162750.6703109145, Eff=99.78%
INFO:bamboo.analysisutils:Selection hasAtLeast2FakeableLeptons: N=63175.0, SumW=62916.42501783371, Eff=5.41%
INFO:bamboo.analysisutils:Selection withTrig: N=5587.0, SumW=5576.09399586916, Eff=8.86%
INFO:bamboo.analysisutils:Selection HasElElPreselected: N=0.0, SumW=0.0, Eff=0.00%
INFO:bamboo.analysisutils:Selection HasElElFakeable: N=0.0, SumW=0.0
INFO:bamboo.analysisutils:Selection HasElElFakeablePreMllCutOutZ: N=0.0, SumW=0.0
INFO:bamboo.analysisutils:Selection HasElElFakeablePreMllCutOutZTightVeto: N=0.0, SumW=0.0
INFO:bamboo.analysisutils:Selection HasElElTight: N=0.0, SumW=0.0
INFO:bamboo.analysisutils:Selection HasElElTightTwoAk4Jets: N=0.0, SumW=0.0
INFO:bamboo.analysisutils:Selection HasElElTightTwoAk4JetsExclusiveResolvedTwoBtags: N=0.0, SumW=0.0
INFO:bamboo.analysisutils:Cutflow report HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags for sample TTTo2L2Nu
INFO:bamboo.analysisutils:Sum of event weights for processed files: 4.920320e+07
WARNING:bamboo.plots:Could not find object HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags_goodlumis
INFO:bamboo.analysisutils:Selection none: N=682600.0, SumW=682600.0
INFO:bamboo.analysisutils:Selection L1PreFiringRate: N=682600.0, SumW=670897.351697749, Eff=98.29%, TotalEff=1.36%
INFO:bamboo.analysisutils:Selection passMETFlags: N=681817.0, SumW=669770.5956011419, Eff=99.83%, TotalEff=1.36%
INFO:bamboo.analysisutils:Selection hasAtLeast2FakeableLeptons: N=162182.0, SumW=162767.4880866174, Eff=24.30%, TotalEff=0.33%
INFO:bamboo.analysisutils:Selection withTrig: N=156589.0, SumW=11343815.937383113, Eff=6969.34%, TotalEff=23.06%
INFO:bamboo.analysisutils:Selection HasMuMuPreselected: N=58774.0, SumW=4230474.057923581, Eff=37.29%, TotalEff=8.60%
INFO:bamboo.analysisutils:Selection HasMuMuFakeable: N=51522.0, SumW=3632524.98874208, Eff=85.87%, TotalEff=7.38%
INFO:bamboo.analysisutils:Selection HasMuMuFakeablePreMllCutOutZ: N=44030.0, SumW=3099923.463684674, Eff=85.34%, TotalEff=6.30%
INFO:bamboo.analysisutils:Selection HasMuMuFakeablePreMllCutOutZTightVeto: N=44025.0, SumW=3099621.963663271, Eff=99.99%, TotalEff=6.30%
INFO:bamboo.analysisutils:Selection HasMuMuTight: N=38417.0, SumW=2695419.9585190658, Eff=86.96%, TotalEff=5.48%
INFO:bamboo.analysisutils:Selection HasMuMuTightTwoAk4Jets: N=31642.0, SumW=2215578.677272199, Eff=82.20%, TotalEff=4.50%
INFO:bamboo.analysisutils:Selection HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags: N=14268.0, SumW=895104.1081523245, Eff=40.40%, TotalEff=1.82%
INFO:bamboo.analysisutils:Cutflow report HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags for sample DoubleMuon_2016B
INFO:bamboo.analysisutils:Selection none: N=1426646.0, SumW=1426646.0
INFO:bamboo.analysisutils:Selection goodlumis: N=1171499.0, SumW=1171499.0, Eff=82.12%
INFO:bamboo.analysisutils:Selection L1PreFiringRate: N=1171499.0, SumW=1165312.9641152024, Eff=99.47%
INFO:bamboo.analysisutils:Selection passMETFlags: N=1168923.0, SumW=1162750.6703109145, Eff=99.78%
INFO:bamboo.analysisutils:Selection hasAtLeast2FakeableLeptons: N=63175.0, SumW=62916.42501783371, Eff=5.41%
INFO:bamboo.analysisutils:Selection withTrig: N=5587.0, SumW=5576.09399586916, Eff=8.86%
INFO:bamboo.analysisutils:Selection HasMuMuPreselected: N=5586.0, SumW=5575.09399586916, Eff=99.98%
INFO:bamboo.analysisutils:Selection HasMuMuFakeable: N=893.0, SumW=887.7082483172417, Eff=15.92%
INFO:bamboo.analysisutils:Selection HasMuMuFakeablePreMllCutOutZ: N=304.0, SumW=302.73094618320465, Eff=34.10%
INFO:bamboo.analysisutils:Selection HasMuMuFakeablePreMllCutOutZTightVeto: N=304.0, SumW=302.73094618320465, Eff=100.00%
INFO:bamboo.analysisutils:Selection HasMuMuTight: N=125.0, SumW=124.34002757072449, Eff=41.07%
INFO:bamboo.analysisutils:Selection HasMuMuTightTwoAk4Jets: N=21.0, SumW=20.8008673787117, Eff=16.73%
INFO:bamboo.analysisutils:Selection HasMuMuTightTwoAk4JetsExclusiveResolvedTwoBtags: N=2.0, SumW=2.0, Eff=9.61%
INFO:bamboo.analysisutils:Cutflow report HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags for sample TTTo2L2Nu
INFO:bamboo.analysisutils:Sum of event weights for processed files: 4.920320e+07
WARNING:bamboo.plots:Could not find object HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags_goodlumis
INFO:bamboo.analysisutils:Selection none: N=682600.0, SumW=682600.0
INFO:bamboo.analysisutils:Selection L1PreFiringRate: N=682600.0, SumW=670897.351697749, Eff=98.29%, TotalEff=1.36%
INFO:bamboo.analysisutils:Selection passMETFlags: N=681817.0, SumW=669770.5956011419, Eff=99.83%, TotalEff=1.36%
INFO:bamboo.analysisutils:Selection hasAtLeast2FakeableLeptons: N=162182.0, SumW=162767.4880866174, Eff=24.30%, TotalEff=0.33%
INFO:bamboo.analysisutils:Selection withTrig: N=156589.0, SumW=11343815.937383113, Eff=6969.34%, TotalEff=23.06%
INFO:bamboo.analysisutils:Selection HasElMuPreselected: N=76175.0, SumW=5535072.151486643, Eff=48.79%, TotalEff=11.25%
INFO:bamboo.analysisutils:Selection HasElMuFakeable: N=68326.0, SumW=4820832.107926687, Eff=87.10%, TotalEff=9.80%
INFO:bamboo.analysisutils:Selection HasElMuFakeablePreMllCutOutZ: N=67897.0, SumW=4790409.053624153, Eff=99.37%, TotalEff=9.74%
INFO:bamboo.analysisutils:Selection HasElMuFakeablePreMllCutOutZTightVeto: N=67888.0, SumW=4789744.734248136, Eff=99.99%, TotalEff=9.73%
INFO:bamboo.analysisutils:Selection HasElMuTight: N=49555.0, SumW=2981602.3175597177, Eff=62.25%, TotalEff=6.06%
INFO:bamboo.analysisutils:Selection HasElMuTightTwoAk4Jets: N=40909.0, SumW=2456716.7024490717, Eff=82.40%, TotalEff=4.99%
INFO:bamboo.analysisutils:Selection HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags: N=18532.0, SumW=999019.1004819246, Eff=40.66%, TotalEff=2.03%
INFO:bamboo.analysisutils:Cutflow report HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags for sample DoubleMuon_2016B
INFO:bamboo.analysisutils:Selection none: N=1426646.0, SumW=1426646.0
INFO:bamboo.analysisutils:Selection goodlumis: N=1171499.0, SumW=1171499.0, Eff=82.12%
INFO:bamboo.analysisutils:Selection L1PreFiringRate: N=1171499.0, SumW=1165312.9641152024, Eff=99.47%
INFO:bamboo.analysisutils:Selection passMETFlags: N=1168923.0, SumW=1162750.6703109145, Eff=99.78%
INFO:bamboo.analysisutils:Selection hasAtLeast2FakeableLeptons: N=63175.0, SumW=62916.42501783371, Eff=5.41%
INFO:bamboo.analysisutils:Selection withTrig: N=5587.0, SumW=5576.09399586916, Eff=8.86%
INFO:bamboo.analysisutils:Selection HasElMuPreselected: N=12.0, SumW=12.0, Eff=0.22%
INFO:bamboo.analysisutils:Selection HasElMuFakeable: N=1.0, SumW=1.0, Eff=8.33%
INFO:bamboo.analysisutils:Selection HasElMuFakeablePreMllCutOutZ: N=1.0, SumW=1.0, Eff=100.00%
INFO:bamboo.analysisutils:Selection HasElMuFakeablePreMllCutOutZTightVeto: N=1.0, SumW=1.0, Eff=100.00%
INFO:bamboo.analysisutils:Selection HasElMuTight: N=0.0, SumW=0.0, Eff=0.00%
INFO:bamboo.analysisutils:Selection HasElMuTightTwoAk4Jets: N=0.0, SumW=0.0
INFO:bamboo.analysisutils:Selection HasElMuTightTwoAk4JetsExclusiveResolvedTwoBtags: N=0.0, SumW=0.0
WARNING:bamboo.analysisutils:Directory 'test_Plotter/plots_2016' already exists, previous plots will be overwritten
DEBUG:bamboo.analysisutils:Running command `plotIt -i test_Plotter -o test_Plotter/plots_2016 -y -e 2016 test_Plotter/plots.yml`, with logfile test_Plotter/plots_2016/out.log
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
Error in <ROOT::Math::Cephes::igami>: Wrong domain for parameter a (must be > 0)
INFO:bamboo.analysisutils:plotIt output is available in test_Plotter/plots_2016
Btag CSV file /home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/ScaleFactors_POG/DeepJet_2016LegacySF_V1_TuneCP5.csv
Reweighting file /home/users/f/b/fbury/bamboodev/HHbbWWAnalysis/data/ScaleFactors_Btag/BtagReweightingRatio_jetN_TTTo2L2Nu_2016.json
... Processing Tight lepton type
...... Processing Ak4 jet selection
...... Processing Resolved jet (2 btags) selection
Could not find branch tree.HLT.Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ, will omit it
Could not find branch tree.HLT.Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ, will omit it
... Processing Tight lepton type
...... Processing Ak4 jet selection
...... Processing Resolved jet (2 btags) selection
